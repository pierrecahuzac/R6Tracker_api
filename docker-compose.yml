services:
  api_r6tracker:
    container_name: api_r6tracker
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    volumes:
      - ./api:/usr/src/api
      - /usr/src/api/node_modules

    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:5432/${POSTGRES_DB}?schema=public

    restart: unless-stopped

    networks:
      - R6Tracker

  db_r6Tracker:
    image: postgres:15-alpine
    container_name: db_r6Tracker
    restart: always

    volumes:
      - postgres_data:/var/lib/postgresql/data

    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}

    networks:
      - R6Tracker
    healthcheck: # Ajoutez ceci pour que Docker sache quand la DB est prÃªte
      test: ["CMD-SHELL", "pg_isready -U R6Tracker"]
      interval: 5s
      timeout: 5s
      retries: 5

  # adminer:
  #   container_name: adminer_r6Tracker
  #   image: adminer
  #   ports:
  #     - 9090:8080
  #   networks:
  #     - R6Tracker
  #   profiles: [development]

  prisma_studio:
    container_name: prisma_studio
    image: timothyjmiller/prisma-studio
    ports:
      - 5555:5555
    env_file:
      - .env
    networks:
      - R6Tracker
    depends_on:
      db_r6Tracker:
        condition: service_healthy

networks:
  R6Tracker: {}

volumes:
  postgres_data:
