
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PlatformScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SideScalarFieldEnum = {
  id: 'id',
  name: 'name',
  label: 'label'
};

exports.Prisma.GameModeScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  email: 'email',
  username: 'username',
  password: 'password'
};

exports.Prisma.PlayerAccountScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  platformId: 'platformId',
  gamertag: 'gamertag',
  externalId: 'externalId'
};

exports.Prisma.MapScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameFr: 'nameFr',
  url: 'url'
};

exports.Prisma.OperatorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sideId: 'sideId',
  image: 'image',
  icon: 'icon'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  date: 'date',
  playerId: 'playerId',
  mapId: 'mapId',
  modeId: 'modeId',
  platformId: 'platformId',
  accountId: 'accountId',
  playerScore: 'playerScore',
  opponentScore: 'opponentScore',
  status: 'status',
  overtime: 'overtime',
  roundNumber: 'roundNumber',
  isFinished: 'isFinished'
};

exports.Prisma.RoundScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  gameId: 'gameId',
  playerId: 'playerId',
  roundNumber: 'roundNumber',
  sideId: 'sideId',
  operatorId: 'operatorId',
  roundResult: 'roundResult',
  kills: 'kills',
  death: 'death',
  assists: 'assists',
  disconnected: 'disconnected',
  points: 'points',
  isFinished: 'isFinished'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Platform: 'Platform',
  Side: 'Side',
  GameMode: 'GameMode',
  Player: 'Player',
  PlayerAccount: 'PlayerAccount',
  Map: 'Map',
  Operator: 'Operator',
  Game: 'Game',
  Round: 'Round'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/thaliios/Dev/R6Tracker_api/api/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/thaliios/Dev/R6Tracker_api/api/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": true,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Platform {\n  id       String          @id @default(uuid())\n  name     String          @unique\n  games    Game[]\n  accounts PlayerAccount[]\n}\n\nmodel Side {\n  id         String     @id @default(uuid())\n  name       String     @unique\n  label      String\n  operators  Operator[]\n  roundsSide Round[]    @relation(\"RoundSide\")\n}\n\nmodel GameMode {\n  id    String @id @default(uuid())\n  name  String @unique\n  games Game[]\n}\n\n// model Result {\n//   id    String @id @default(uuid())\n//   name  String @unique\n//   label String\n//   games Game[]\n// }\n\nmodel Player {\n  id        String          @id @default(uuid())\n  createdAt DateTime        @default(now())\n  email     String          @unique\n  username  String\n  password  String\n  accounts  PlayerAccount[]\n  games     Game[]\n  rounds    Round[]\n}\n\nmodel PlayerAccount {\n  id         String   @id @default(uuid())\n  player     Player   @relation(fields: [playerId], references: [id])\n  playerId   String\n  platform   Platform @relation(fields: [platformId], references: [id])\n  platformId String\n  gamertag   String\n  externalId String?\n  games      Game[]\n\n  @@unique([playerId, platformId])\n  @@index([platformId, gamertag])\n}\n\nmodel Map {\n  id     String @id @default(uuid())\n  name   String @unique\n  nameFr String @unique\n  url    String @unique\n  games  Game[]\n}\n\nmodel Operator {\n  id     String  @id @default(uuid())\n  name   String  @unique\n  side   Side    @relation(fields: [sideId], references: [id])\n  sideId String\n  image  String?\n  icon   String\n  rounds Round[]\n}\n\nmodel Game {\n  id        String    @id @default(uuid())\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n  date      DateTime?\n\n  player   Player? @relation(fields: [playerId], references: [id])\n  playerId String?\n\n  map   Map?    @relation(fields: [mapId], references: [id])\n  mapId String?\n\n  mode   GameMode? @relation(fields: [modeId], references: [id])\n  modeId String?\n\n  platform   Platform? @relation(fields: [platformId], references: [id])\n  platformId String?\n\n  account       PlayerAccount? @relation(fields: [accountId], references: [id])\n  accountId     String?\n  playerScore   Int?           @default(0)\n  opponentScore Int?           @default(0)\n  // result        Result?        @relation(fields: [resultId], references: [id])\n  // resultId      String?\n  status        String?\n  overtime      Boolean?       @default(false)\n  roundNumber   Int?           @default(0)\n  rounds        Round[]\n  isFinished    Boolean        @default(false)\n\n  @@index([playerId])\n  @@index([mapId])\n  @@index([modeId])\n  @@index([platformId])\n  @@index([date])\n}\n\nmodel Round {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n\n  game     Game   @relation(fields: [gameId], references: [id])\n  gameId   String\n  player   Player @relation(fields: [playerId], references: [id])\n  playerId String\n\n  roundNumber Int\n\n  side   Side   @relation(\"RoundSide\", fields: [sideId], references: [id])\n  sideId String\n\n  operator     Operator? @relation(fields: [operatorId], references: [id])\n  operatorId   String?\n  roundResult  String?\n  kills        Int       @default(0)\n  death        Boolean   @default(false)\n  assists      Int       @default(0)\n  disconnected Boolean   @default(false)\n  points       Int       @default(0)\n  isFinished   Boolean   @default(false)\n\n  @@unique([gameId, roundNumber])\n  @@index([gameId])\n}\n",
  "inlineSchemaHash": "72cadccf8bbc82b1f12cdb853831f47842fbd7ed4674cdf6b1edd1f01dbf1556",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Platform\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"games\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToPlatform\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"PlayerAccount\",\"relationName\":\"PlatformToPlayerAccount\"}],\"dbName\":null},\"Side\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"operators\",\"kind\":\"object\",\"type\":\"Operator\",\"relationName\":\"OperatorToSide\"},{\"name\":\"roundsSide\",\"kind\":\"object\",\"type\":\"Round\",\"relationName\":\"RoundSide\"}],\"dbName\":null},\"GameMode\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"games\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToGameMode\"}],\"dbName\":null},\"Player\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"PlayerAccount\",\"relationName\":\"PlayerToPlayerAccount\"},{\"name\":\"games\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToPlayer\"},{\"name\":\"rounds\",\"kind\":\"object\",\"type\":\"Round\",\"relationName\":\"PlayerToRound\"}],\"dbName\":null},\"PlayerAccount\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"PlayerToPlayerAccount\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"platform\",\"kind\":\"object\",\"type\":\"Platform\",\"relationName\":\"PlatformToPlayerAccount\"},{\"name\":\"platformId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gamertag\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"externalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"games\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToPlayerAccount\"}],\"dbName\":null},\"Map\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nameFr\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"games\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToMap\"}],\"dbName\":null},\"Operator\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"side\",\"kind\":\"object\",\"type\":\"Side\",\"relationName\":\"OperatorToSide\"},{\"name\":\"sideId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rounds\",\"kind\":\"object\",\"type\":\"Round\",\"relationName\":\"OperatorToRound\"}],\"dbName\":null},\"Game\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"GameToPlayer\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"map\",\"kind\":\"object\",\"type\":\"Map\",\"relationName\":\"GameToMap\"},{\"name\":\"mapId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mode\",\"kind\":\"object\",\"type\":\"GameMode\",\"relationName\":\"GameToGameMode\"},{\"name\":\"modeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"platform\",\"kind\":\"object\",\"type\":\"Platform\",\"relationName\":\"GameToPlatform\"},{\"name\":\"platformId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"PlayerAccount\",\"relationName\":\"GameToPlayerAccount\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"playerScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"opponentScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"overtime\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"roundNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rounds\",\"kind\":\"object\",\"type\":\"Round\",\"relationName\":\"GameToRound\"},{\"name\":\"isFinished\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"Round\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"game\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToRound\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Player\",\"relationName\":\"PlayerToRound\"},{\"name\":\"playerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roundNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"side\",\"kind\":\"object\",\"type\":\"Side\",\"relationName\":\"RoundSide\"},{\"name\":\"sideId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"operator\",\"kind\":\"object\",\"type\":\"Operator\",\"relationName\":\"OperatorToRound\"},{\"name\":\"operatorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roundResult\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kills\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"death\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"assists\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"disconnected\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isFinished\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

