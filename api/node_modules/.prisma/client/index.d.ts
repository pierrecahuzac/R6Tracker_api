
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Platform
 * 
 */
export type Platform = $Result.DefaultSelection<Prisma.$PlatformPayload>
/**
 * Model Side
 * 
 */
export type Side = $Result.DefaultSelection<Prisma.$SidePayload>
/**
 * Model GameMode
 * 
 */
export type GameMode = $Result.DefaultSelection<Prisma.$GameModePayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model PlayerAccount
 * 
 */
export type PlayerAccount = $Result.DefaultSelection<Prisma.$PlayerAccountPayload>
/**
 * Model Map
 * 
 */
export type Map = $Result.DefaultSelection<Prisma.$MapPayload>
/**
 * Model Operator
 * 
 */
export type Operator = $Result.DefaultSelection<Prisma.$OperatorPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model Round
 * 
 */
export type Round = $Result.DefaultSelection<Prisma.$RoundPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Platforms
 * const platforms = await prisma.platform.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Platforms
   * const platforms = await prisma.platform.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.platform`: Exposes CRUD operations for the **Platform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Platforms
    * const platforms = await prisma.platform.findMany()
    * ```
    */
  get platform(): Prisma.PlatformDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.side`: Exposes CRUD operations for the **Side** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sides
    * const sides = await prisma.side.findMany()
    * ```
    */
  get side(): Prisma.SideDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameMode`: Exposes CRUD operations for the **GameMode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameModes
    * const gameModes = await prisma.gameMode.findMany()
    * ```
    */
  get gameMode(): Prisma.GameModeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playerAccount`: Exposes CRUD operations for the **PlayerAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerAccounts
    * const playerAccounts = await prisma.playerAccount.findMany()
    * ```
    */
  get playerAccount(): Prisma.PlayerAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.map`: Exposes CRUD operations for the **Map** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Maps
    * const maps = await prisma.map.findMany()
    * ```
    */
  get map(): Prisma.MapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.operator`: Exposes CRUD operations for the **Operator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Operators
    * const operators = await prisma.operator.findMany()
    * ```
    */
  get operator(): Prisma.OperatorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.round`: Exposes CRUD operations for the **Round** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rounds
    * const rounds = await prisma.round.findMany()
    * ```
    */
  get round(): Prisma.RoundDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Platform: 'Platform',
    Side: 'Side',
    GameMode: 'GameMode',
    Player: 'Player',
    PlayerAccount: 'PlayerAccount',
    Map: 'Map',
    Operator: 'Operator',
    Game: 'Game',
    Round: 'Round'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "platform" | "side" | "gameMode" | "player" | "playerAccount" | "map" | "operator" | "game" | "round"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Platform: {
        payload: Prisma.$PlatformPayload<ExtArgs>
        fields: Prisma.PlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlatformFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlatformFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          findFirst: {
            args: Prisma.PlatformFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlatformFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          findMany: {
            args: Prisma.PlatformFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          create: {
            args: Prisma.PlatformCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          createMany: {
            args: Prisma.PlatformCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlatformCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          delete: {
            args: Prisma.PlatformDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          update: {
            args: Prisma.PlatformUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          deleteMany: {
            args: Prisma.PlatformDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlatformUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlatformUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          upsert: {
            args: Prisma.PlatformUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          aggregate: {
            args: Prisma.PlatformAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlatform>
          }
          groupBy: {
            args: Prisma.PlatformGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlatformCountArgs<ExtArgs>
            result: $Utils.Optional<PlatformCountAggregateOutputType> | number
          }
        }
      }
      Side: {
        payload: Prisma.$SidePayload<ExtArgs>
        fields: Prisma.SideFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SideFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SideFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>
          }
          findFirst: {
            args: Prisma.SideFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SideFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>
          }
          findMany: {
            args: Prisma.SideFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>[]
          }
          create: {
            args: Prisma.SideCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>
          }
          createMany: {
            args: Prisma.SideCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SideCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>[]
          }
          delete: {
            args: Prisma.SideDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>
          }
          update: {
            args: Prisma.SideUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>
          }
          deleteMany: {
            args: Prisma.SideDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SideUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SideUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>[]
          }
          upsert: {
            args: Prisma.SideUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SidePayload>
          }
          aggregate: {
            args: Prisma.SideAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSide>
          }
          groupBy: {
            args: Prisma.SideGroupByArgs<ExtArgs>
            result: $Utils.Optional<SideGroupByOutputType>[]
          }
          count: {
            args: Prisma.SideCountArgs<ExtArgs>
            result: $Utils.Optional<SideCountAggregateOutputType> | number
          }
        }
      }
      GameMode: {
        payload: Prisma.$GameModePayload<ExtArgs>
        fields: Prisma.GameModeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameModeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameModeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>
          }
          findFirst: {
            args: Prisma.GameModeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameModeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>
          }
          findMany: {
            args: Prisma.GameModeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>[]
          }
          create: {
            args: Prisma.GameModeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>
          }
          createMany: {
            args: Prisma.GameModeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameModeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>[]
          }
          delete: {
            args: Prisma.GameModeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>
          }
          update: {
            args: Prisma.GameModeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>
          }
          deleteMany: {
            args: Prisma.GameModeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameModeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameModeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>[]
          }
          upsert: {
            args: Prisma.GameModeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameModePayload>
          }
          aggregate: {
            args: Prisma.GameModeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameMode>
          }
          groupBy: {
            args: Prisma.GameModeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameModeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameModeCountArgs<ExtArgs>
            result: $Utils.Optional<GameModeCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      PlayerAccount: {
        payload: Prisma.$PlayerAccountPayload<ExtArgs>
        fields: Prisma.PlayerAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>
          }
          findFirst: {
            args: Prisma.PlayerAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>
          }
          findMany: {
            args: Prisma.PlayerAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>[]
          }
          create: {
            args: Prisma.PlayerAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>
          }
          createMany: {
            args: Prisma.PlayerAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>[]
          }
          delete: {
            args: Prisma.PlayerAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>
          }
          update: {
            args: Prisma.PlayerAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>
          }
          deleteMany: {
            args: Prisma.PlayerAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>[]
          }
          upsert: {
            args: Prisma.PlayerAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerAccountPayload>
          }
          aggregate: {
            args: Prisma.PlayerAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerAccount>
          }
          groupBy: {
            args: Prisma.PlayerAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerAccountCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerAccountCountAggregateOutputType> | number
          }
        }
      }
      Map: {
        payload: Prisma.$MapPayload<ExtArgs>
        fields: Prisma.MapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>
          }
          findFirst: {
            args: Prisma.MapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>
          }
          findMany: {
            args: Prisma.MapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>[]
          }
          create: {
            args: Prisma.MapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>
          }
          createMany: {
            args: Prisma.MapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>[]
          }
          delete: {
            args: Prisma.MapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>
          }
          update: {
            args: Prisma.MapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>
          }
          deleteMany: {
            args: Prisma.MapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>[]
          }
          upsert: {
            args: Prisma.MapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MapPayload>
          }
          aggregate: {
            args: Prisma.MapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMap>
          }
          groupBy: {
            args: Prisma.MapGroupByArgs<ExtArgs>
            result: $Utils.Optional<MapGroupByOutputType>[]
          }
          count: {
            args: Prisma.MapCountArgs<ExtArgs>
            result: $Utils.Optional<MapCountAggregateOutputType> | number
          }
        }
      }
      Operator: {
        payload: Prisma.$OperatorPayload<ExtArgs>
        fields: Prisma.OperatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          findFirst: {
            args: Prisma.OperatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          findMany: {
            args: Prisma.OperatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          create: {
            args: Prisma.OperatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          createMany: {
            args: Prisma.OperatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperatorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          delete: {
            args: Prisma.OperatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          update: {
            args: Prisma.OperatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          deleteMany: {
            args: Prisma.OperatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OperatorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          upsert: {
            args: Prisma.OperatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          aggregate: {
            args: Prisma.OperatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperator>
          }
          groupBy: {
            args: Prisma.OperatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperatorCountArgs<ExtArgs>
            result: $Utils.Optional<OperatorCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      Round: {
        payload: Prisma.$RoundPayload<ExtArgs>
        fields: Prisma.RoundFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoundFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoundFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>
          }
          findFirst: {
            args: Prisma.RoundFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoundFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>
          }
          findMany: {
            args: Prisma.RoundFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>[]
          }
          create: {
            args: Prisma.RoundCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>
          }
          createMany: {
            args: Prisma.RoundCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoundCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>[]
          }
          delete: {
            args: Prisma.RoundDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>
          }
          update: {
            args: Prisma.RoundUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>
          }
          deleteMany: {
            args: Prisma.RoundDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoundUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoundUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>[]
          }
          upsert: {
            args: Prisma.RoundUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoundPayload>
          }
          aggregate: {
            args: Prisma.RoundAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRound>
          }
          groupBy: {
            args: Prisma.RoundGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoundGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoundCountArgs<ExtArgs>
            result: $Utils.Optional<RoundCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    platform?: PlatformOmit
    side?: SideOmit
    gameMode?: GameModeOmit
    player?: PlayerOmit
    playerAccount?: PlayerAccountOmit
    map?: MapOmit
    operator?: OperatorOmit
    game?: GameOmit
    round?: RoundOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlatformCountOutputType
   */

  export type PlatformCountOutputType = {
    games: number
    accounts: number
  }

  export type PlatformCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | PlatformCountOutputTypeCountGamesArgs
    accounts?: boolean | PlatformCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlatformCountOutputType
     */
    select?: PlatformCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerAccountWhereInput
  }


  /**
   * Count Type SideCountOutputType
   */

  export type SideCountOutputType = {
    operators: number
    roundsSide: number
  }

  export type SideCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operators?: boolean | SideCountOutputTypeCountOperatorsArgs
    roundsSide?: boolean | SideCountOutputTypeCountRoundsSideArgs
  }

  // Custom InputTypes
  /**
   * SideCountOutputType without action
   */
  export type SideCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SideCountOutputType
     */
    select?: SideCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SideCountOutputType without action
   */
  export type SideCountOutputTypeCountOperatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorWhereInput
  }

  /**
   * SideCountOutputType without action
   */
  export type SideCountOutputTypeCountRoundsSideArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoundWhereInput
  }


  /**
   * Count Type GameModeCountOutputType
   */

  export type GameModeCountOutputType = {
    games: number
  }

  export type GameModeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | GameModeCountOutputTypeCountGamesArgs
  }

  // Custom InputTypes
  /**
   * GameModeCountOutputType without action
   */
  export type GameModeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameModeCountOutputType
     */
    select?: GameModeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameModeCountOutputType without action
   */
  export type GameModeCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    accounts: number
    games: number
    rounds: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | PlayerCountOutputTypeCountAccountsArgs
    games?: boolean | PlayerCountOutputTypeCountGamesArgs
    rounds?: boolean | PlayerCountOutputTypeCountRoundsArgs
  }

  // Custom InputTypes
  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerAccountWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoundWhereInput
  }


  /**
   * Count Type PlayerAccountCountOutputType
   */

  export type PlayerAccountCountOutputType = {
    games: number
  }

  export type PlayerAccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | PlayerAccountCountOutputTypeCountGamesArgs
  }

  // Custom InputTypes
  /**
   * PlayerAccountCountOutputType without action
   */
  export type PlayerAccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccountCountOutputType
     */
    select?: PlayerAccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerAccountCountOutputType without action
   */
  export type PlayerAccountCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type MapCountOutputType
   */

  export type MapCountOutputType = {
    games: number
  }

  export type MapCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | MapCountOutputTypeCountGamesArgs
  }

  // Custom InputTypes
  /**
   * MapCountOutputType without action
   */
  export type MapCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MapCountOutputType
     */
    select?: MapCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MapCountOutputType without action
   */
  export type MapCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type OperatorCountOutputType
   */

  export type OperatorCountOutputType = {
    rounds: number
  }

  export type OperatorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rounds?: boolean | OperatorCountOutputTypeCountRoundsArgs
  }

  // Custom InputTypes
  /**
   * OperatorCountOutputType without action
   */
  export type OperatorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorCountOutputType
     */
    select?: OperatorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OperatorCountOutputType without action
   */
  export type OperatorCountOutputTypeCountRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoundWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    rounds: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rounds?: boolean | GameCountOutputTypeCountRoundsArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoundWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Platform
   */

  export type AggregatePlatform = {
    _count: PlatformCountAggregateOutputType | null
    _min: PlatformMinAggregateOutputType | null
    _max: PlatformMaxAggregateOutputType | null
  }

  export type PlatformMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type PlatformMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type PlatformCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type PlatformMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PlatformMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PlatformCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platform to aggregate.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Platforms
    **/
    _count?: true | PlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlatformMaxAggregateInputType
  }

  export type GetPlatformAggregateType<T extends PlatformAggregateArgs> = {
        [P in keyof T & keyof AggregatePlatform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlatform[P]>
      : GetScalarType<T[P], AggregatePlatform[P]>
  }




  export type PlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlatformWhereInput
    orderBy?: PlatformOrderByWithAggregationInput | PlatformOrderByWithAggregationInput[]
    by: PlatformScalarFieldEnum[] | PlatformScalarFieldEnum
    having?: PlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlatformCountAggregateInputType | true
    _min?: PlatformMinAggregateInputType
    _max?: PlatformMaxAggregateInputType
  }

  export type PlatformGroupByOutputType = {
    id: string
    name: string
    _count: PlatformCountAggregateOutputType | null
    _min: PlatformMinAggregateOutputType | null
    _max: PlatformMaxAggregateOutputType | null
  }

  type GetPlatformGroupByPayload<T extends PlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlatformGroupByOutputType[P]>
            : GetScalarType<T[P], PlatformGroupByOutputType[P]>
        }
      >
    >


  export type PlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    games?: boolean | Platform$gamesArgs<ExtArgs>
    accounts?: boolean | Platform$accountsArgs<ExtArgs>
    _count?: boolean | PlatformCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type PlatformOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["platform"]>
  export type PlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | Platform$gamesArgs<ExtArgs>
    accounts?: boolean | Platform$accountsArgs<ExtArgs>
    _count?: boolean | PlatformCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlatformIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PlatformIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Platform"
    objects: {
      games: Prisma.$GamePayload<ExtArgs>[]
      accounts: Prisma.$PlayerAccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["platform"]>
    composites: {}
  }

  type PlatformGetPayload<S extends boolean | null | undefined | PlatformDefaultArgs> = $Result.GetResult<Prisma.$PlatformPayload, S>

  type PlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlatformFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlatformCountAggregateInputType | true
    }

  export interface PlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Platform'], meta: { name: 'Platform' } }
    /**
     * Find zero or one Platform that matches the filter.
     * @param {PlatformFindUniqueArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlatformFindUniqueArgs>(args: SelectSubset<T, PlatformFindUniqueArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Platform that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlatformFindUniqueOrThrowArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlatformFindUniqueOrThrowArgs>(args: SelectSubset<T, PlatformFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Platform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindFirstArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlatformFindFirstArgs>(args?: SelectSubset<T, PlatformFindFirstArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Platform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindFirstOrThrowArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlatformFindFirstOrThrowArgs>(args?: SelectSubset<T, PlatformFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Platforms
     * const platforms = await prisma.platform.findMany()
     * 
     * // Get first 10 Platforms
     * const platforms = await prisma.platform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const platformWithIdOnly = await prisma.platform.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlatformFindManyArgs>(args?: SelectSubset<T, PlatformFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Platform.
     * @param {PlatformCreateArgs} args - Arguments to create a Platform.
     * @example
     * // Create one Platform
     * const Platform = await prisma.platform.create({
     *   data: {
     *     // ... data to create a Platform
     *   }
     * })
     * 
     */
    create<T extends PlatformCreateArgs>(args: SelectSubset<T, PlatformCreateArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Platforms.
     * @param {PlatformCreateManyArgs} args - Arguments to create many Platforms.
     * @example
     * // Create many Platforms
     * const platform = await prisma.platform.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlatformCreateManyArgs>(args?: SelectSubset<T, PlatformCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Platforms and returns the data saved in the database.
     * @param {PlatformCreateManyAndReturnArgs} args - Arguments to create many Platforms.
     * @example
     * // Create many Platforms
     * const platform = await prisma.platform.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Platforms and only return the `id`
     * const platformWithIdOnly = await prisma.platform.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlatformCreateManyAndReturnArgs>(args?: SelectSubset<T, PlatformCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Platform.
     * @param {PlatformDeleteArgs} args - Arguments to delete one Platform.
     * @example
     * // Delete one Platform
     * const Platform = await prisma.platform.delete({
     *   where: {
     *     // ... filter to delete one Platform
     *   }
     * })
     * 
     */
    delete<T extends PlatformDeleteArgs>(args: SelectSubset<T, PlatformDeleteArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Platform.
     * @param {PlatformUpdateArgs} args - Arguments to update one Platform.
     * @example
     * // Update one Platform
     * const platform = await prisma.platform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlatformUpdateArgs>(args: SelectSubset<T, PlatformUpdateArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Platforms.
     * @param {PlatformDeleteManyArgs} args - Arguments to filter Platforms to delete.
     * @example
     * // Delete a few Platforms
     * const { count } = await prisma.platform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlatformDeleteManyArgs>(args?: SelectSubset<T, PlatformDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Platforms
     * const platform = await prisma.platform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlatformUpdateManyArgs>(args: SelectSubset<T, PlatformUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platforms and returns the data updated in the database.
     * @param {PlatformUpdateManyAndReturnArgs} args - Arguments to update many Platforms.
     * @example
     * // Update many Platforms
     * const platform = await prisma.platform.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Platforms and only return the `id`
     * const platformWithIdOnly = await prisma.platform.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlatformUpdateManyAndReturnArgs>(args: SelectSubset<T, PlatformUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Platform.
     * @param {PlatformUpsertArgs} args - Arguments to update or create a Platform.
     * @example
     * // Update or create a Platform
     * const platform = await prisma.platform.upsert({
     *   create: {
     *     // ... data to create a Platform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Platform we want to update
     *   }
     * })
     */
    upsert<T extends PlatformUpsertArgs>(args: SelectSubset<T, PlatformUpsertArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformCountArgs} args - Arguments to filter Platforms to count.
     * @example
     * // Count the number of Platforms
     * const count = await prisma.platform.count({
     *   where: {
     *     // ... the filter for the Platforms we want to count
     *   }
     * })
    **/
    count<T extends PlatformCountArgs>(
      args?: Subset<T, PlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlatformAggregateArgs>(args: Subset<T, PlatformAggregateArgs>): Prisma.PrismaPromise<GetPlatformAggregateType<T>>

    /**
     * Group by Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlatformGroupByArgs['orderBy'] }
        : { orderBy?: PlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Platform model
   */
  readonly fields: PlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Platform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    games<T extends Platform$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Platform$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends Platform$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Platform$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Platform model
   */
  interface PlatformFieldRefs {
    readonly id: FieldRef<"Platform", 'String'>
    readonly name: FieldRef<"Platform", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Platform findUnique
   */
  export type PlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform findUniqueOrThrow
   */
  export type PlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform findFirst
   */
  export type PlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platforms.
     */
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform findFirstOrThrow
   */
  export type PlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platforms.
     */
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform findMany
   */
  export type PlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platforms to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform create
   */
  export type PlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a Platform.
     */
    data: XOR<PlatformCreateInput, PlatformUncheckedCreateInput>
  }

  /**
   * Platform createMany
   */
  export type PlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Platforms.
     */
    data: PlatformCreateManyInput | PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Platform createManyAndReturn
   */
  export type PlatformCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * The data used to create many Platforms.
     */
    data: PlatformCreateManyInput | PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Platform update
   */
  export type PlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a Platform.
     */
    data: XOR<PlatformUpdateInput, PlatformUncheckedUpdateInput>
    /**
     * Choose, which Platform to update.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform updateMany
   */
  export type PlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Platforms.
     */
    data: XOR<PlatformUpdateManyMutationInput, PlatformUncheckedUpdateManyInput>
    /**
     * Filter which Platforms to update
     */
    where?: PlatformWhereInput
    /**
     * Limit how many Platforms to update.
     */
    limit?: number
  }

  /**
   * Platform updateManyAndReturn
   */
  export type PlatformUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * The data used to update Platforms.
     */
    data: XOR<PlatformUpdateManyMutationInput, PlatformUncheckedUpdateManyInput>
    /**
     * Filter which Platforms to update
     */
    where?: PlatformWhereInput
    /**
     * Limit how many Platforms to update.
     */
    limit?: number
  }

  /**
   * Platform upsert
   */
  export type PlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the Platform to update in case it exists.
     */
    where: PlatformWhereUniqueInput
    /**
     * In case the Platform found by the `where` argument doesn't exist, create a new Platform with this data.
     */
    create: XOR<PlatformCreateInput, PlatformUncheckedCreateInput>
    /**
     * In case the Platform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlatformUpdateInput, PlatformUncheckedUpdateInput>
  }

  /**
   * Platform delete
   */
  export type PlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter which Platform to delete.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform deleteMany
   */
  export type PlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platforms to delete
     */
    where?: PlatformWhereInput
    /**
     * Limit how many Platforms to delete.
     */
    limit?: number
  }

  /**
   * Platform.games
   */
  export type Platform$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Platform.accounts
   */
  export type Platform$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    where?: PlayerAccountWhereInput
    orderBy?: PlayerAccountOrderByWithRelationInput | PlayerAccountOrderByWithRelationInput[]
    cursor?: PlayerAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerAccountScalarFieldEnum | PlayerAccountScalarFieldEnum[]
  }

  /**
   * Platform without action
   */
  export type PlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
  }


  /**
   * Model Side
   */

  export type AggregateSide = {
    _count: SideCountAggregateOutputType | null
    _min: SideMinAggregateOutputType | null
    _max: SideMaxAggregateOutputType | null
  }

  export type SideMinAggregateOutputType = {
    id: string | null
    name: string | null
    label: string | null
  }

  export type SideMaxAggregateOutputType = {
    id: string | null
    name: string | null
    label: string | null
  }

  export type SideCountAggregateOutputType = {
    id: number
    name: number
    label: number
    _all: number
  }


  export type SideMinAggregateInputType = {
    id?: true
    name?: true
    label?: true
  }

  export type SideMaxAggregateInputType = {
    id?: true
    name?: true
    label?: true
  }

  export type SideCountAggregateInputType = {
    id?: true
    name?: true
    label?: true
    _all?: true
  }

  export type SideAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Side to aggregate.
     */
    where?: SideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sides to fetch.
     */
    orderBy?: SideOrderByWithRelationInput | SideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sides
    **/
    _count?: true | SideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SideMaxAggregateInputType
  }

  export type GetSideAggregateType<T extends SideAggregateArgs> = {
        [P in keyof T & keyof AggregateSide]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSide[P]>
      : GetScalarType<T[P], AggregateSide[P]>
  }




  export type SideGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SideWhereInput
    orderBy?: SideOrderByWithAggregationInput | SideOrderByWithAggregationInput[]
    by: SideScalarFieldEnum[] | SideScalarFieldEnum
    having?: SideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SideCountAggregateInputType | true
    _min?: SideMinAggregateInputType
    _max?: SideMaxAggregateInputType
  }

  export type SideGroupByOutputType = {
    id: string
    name: string
    label: string
    _count: SideCountAggregateOutputType | null
    _min: SideMinAggregateOutputType | null
    _max: SideMaxAggregateOutputType | null
  }

  type GetSideGroupByPayload<T extends SideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SideGroupByOutputType[P]>
            : GetScalarType<T[P], SideGroupByOutputType[P]>
        }
      >
    >


  export type SideSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    label?: boolean
    operators?: boolean | Side$operatorsArgs<ExtArgs>
    roundsSide?: boolean | Side$roundsSideArgs<ExtArgs>
    _count?: boolean | SideCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["side"]>

  export type SideSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    label?: boolean
  }, ExtArgs["result"]["side"]>

  export type SideSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    label?: boolean
  }, ExtArgs["result"]["side"]>

  export type SideSelectScalar = {
    id?: boolean
    name?: boolean
    label?: boolean
  }

  export type SideOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "label", ExtArgs["result"]["side"]>
  export type SideInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operators?: boolean | Side$operatorsArgs<ExtArgs>
    roundsSide?: boolean | Side$roundsSideArgs<ExtArgs>
    _count?: boolean | SideCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SideIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SideIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SidePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Side"
    objects: {
      operators: Prisma.$OperatorPayload<ExtArgs>[]
      roundsSide: Prisma.$RoundPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      label: string
    }, ExtArgs["result"]["side"]>
    composites: {}
  }

  type SideGetPayload<S extends boolean | null | undefined | SideDefaultArgs> = $Result.GetResult<Prisma.$SidePayload, S>

  type SideCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SideFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SideCountAggregateInputType | true
    }

  export interface SideDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Side'], meta: { name: 'Side' } }
    /**
     * Find zero or one Side that matches the filter.
     * @param {SideFindUniqueArgs} args - Arguments to find a Side
     * @example
     * // Get one Side
     * const side = await prisma.side.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SideFindUniqueArgs>(args: SelectSubset<T, SideFindUniqueArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Side that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SideFindUniqueOrThrowArgs} args - Arguments to find a Side
     * @example
     * // Get one Side
     * const side = await prisma.side.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SideFindUniqueOrThrowArgs>(args: SelectSubset<T, SideFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Side that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SideFindFirstArgs} args - Arguments to find a Side
     * @example
     * // Get one Side
     * const side = await prisma.side.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SideFindFirstArgs>(args?: SelectSubset<T, SideFindFirstArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Side that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SideFindFirstOrThrowArgs} args - Arguments to find a Side
     * @example
     * // Get one Side
     * const side = await prisma.side.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SideFindFirstOrThrowArgs>(args?: SelectSubset<T, SideFindFirstOrThrowArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SideFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sides
     * const sides = await prisma.side.findMany()
     * 
     * // Get first 10 Sides
     * const sides = await prisma.side.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sideWithIdOnly = await prisma.side.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SideFindManyArgs>(args?: SelectSubset<T, SideFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Side.
     * @param {SideCreateArgs} args - Arguments to create a Side.
     * @example
     * // Create one Side
     * const Side = await prisma.side.create({
     *   data: {
     *     // ... data to create a Side
     *   }
     * })
     * 
     */
    create<T extends SideCreateArgs>(args: SelectSubset<T, SideCreateArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sides.
     * @param {SideCreateManyArgs} args - Arguments to create many Sides.
     * @example
     * // Create many Sides
     * const side = await prisma.side.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SideCreateManyArgs>(args?: SelectSubset<T, SideCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sides and returns the data saved in the database.
     * @param {SideCreateManyAndReturnArgs} args - Arguments to create many Sides.
     * @example
     * // Create many Sides
     * const side = await prisma.side.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sides and only return the `id`
     * const sideWithIdOnly = await prisma.side.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SideCreateManyAndReturnArgs>(args?: SelectSubset<T, SideCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Side.
     * @param {SideDeleteArgs} args - Arguments to delete one Side.
     * @example
     * // Delete one Side
     * const Side = await prisma.side.delete({
     *   where: {
     *     // ... filter to delete one Side
     *   }
     * })
     * 
     */
    delete<T extends SideDeleteArgs>(args: SelectSubset<T, SideDeleteArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Side.
     * @param {SideUpdateArgs} args - Arguments to update one Side.
     * @example
     * // Update one Side
     * const side = await prisma.side.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SideUpdateArgs>(args: SelectSubset<T, SideUpdateArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sides.
     * @param {SideDeleteManyArgs} args - Arguments to filter Sides to delete.
     * @example
     * // Delete a few Sides
     * const { count } = await prisma.side.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SideDeleteManyArgs>(args?: SelectSubset<T, SideDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sides
     * const side = await prisma.side.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SideUpdateManyArgs>(args: SelectSubset<T, SideUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sides and returns the data updated in the database.
     * @param {SideUpdateManyAndReturnArgs} args - Arguments to update many Sides.
     * @example
     * // Update many Sides
     * const side = await prisma.side.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sides and only return the `id`
     * const sideWithIdOnly = await prisma.side.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SideUpdateManyAndReturnArgs>(args: SelectSubset<T, SideUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Side.
     * @param {SideUpsertArgs} args - Arguments to update or create a Side.
     * @example
     * // Update or create a Side
     * const side = await prisma.side.upsert({
     *   create: {
     *     // ... data to create a Side
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Side we want to update
     *   }
     * })
     */
    upsert<T extends SideUpsertArgs>(args: SelectSubset<T, SideUpsertArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SideCountArgs} args - Arguments to filter Sides to count.
     * @example
     * // Count the number of Sides
     * const count = await prisma.side.count({
     *   where: {
     *     // ... the filter for the Sides we want to count
     *   }
     * })
    **/
    count<T extends SideCountArgs>(
      args?: Subset<T, SideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Side.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SideAggregateArgs>(args: Subset<T, SideAggregateArgs>): Prisma.PrismaPromise<GetSideAggregateType<T>>

    /**
     * Group by Side.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SideGroupByArgs['orderBy'] }
        : { orderBy?: SideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Side model
   */
  readonly fields: SideFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Side.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SideClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    operators<T extends Side$operatorsArgs<ExtArgs> = {}>(args?: Subset<T, Side$operatorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roundsSide<T extends Side$roundsSideArgs<ExtArgs> = {}>(args?: Subset<T, Side$roundsSideArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Side model
   */
  interface SideFieldRefs {
    readonly id: FieldRef<"Side", 'String'>
    readonly name: FieldRef<"Side", 'String'>
    readonly label: FieldRef<"Side", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Side findUnique
   */
  export type SideFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * Filter, which Side to fetch.
     */
    where: SideWhereUniqueInput
  }

  /**
   * Side findUniqueOrThrow
   */
  export type SideFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * Filter, which Side to fetch.
     */
    where: SideWhereUniqueInput
  }

  /**
   * Side findFirst
   */
  export type SideFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * Filter, which Side to fetch.
     */
    where?: SideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sides to fetch.
     */
    orderBy?: SideOrderByWithRelationInput | SideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sides.
     */
    cursor?: SideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sides.
     */
    distinct?: SideScalarFieldEnum | SideScalarFieldEnum[]
  }

  /**
   * Side findFirstOrThrow
   */
  export type SideFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * Filter, which Side to fetch.
     */
    where?: SideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sides to fetch.
     */
    orderBy?: SideOrderByWithRelationInput | SideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sides.
     */
    cursor?: SideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sides.
     */
    distinct?: SideScalarFieldEnum | SideScalarFieldEnum[]
  }

  /**
   * Side findMany
   */
  export type SideFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * Filter, which Sides to fetch.
     */
    where?: SideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sides to fetch.
     */
    orderBy?: SideOrderByWithRelationInput | SideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sides.
     */
    cursor?: SideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sides.
     */
    skip?: number
    distinct?: SideScalarFieldEnum | SideScalarFieldEnum[]
  }

  /**
   * Side create
   */
  export type SideCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * The data needed to create a Side.
     */
    data: XOR<SideCreateInput, SideUncheckedCreateInput>
  }

  /**
   * Side createMany
   */
  export type SideCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sides.
     */
    data: SideCreateManyInput | SideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Side createManyAndReturn
   */
  export type SideCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * The data used to create many Sides.
     */
    data: SideCreateManyInput | SideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Side update
   */
  export type SideUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * The data needed to update a Side.
     */
    data: XOR<SideUpdateInput, SideUncheckedUpdateInput>
    /**
     * Choose, which Side to update.
     */
    where: SideWhereUniqueInput
  }

  /**
   * Side updateMany
   */
  export type SideUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sides.
     */
    data: XOR<SideUpdateManyMutationInput, SideUncheckedUpdateManyInput>
    /**
     * Filter which Sides to update
     */
    where?: SideWhereInput
    /**
     * Limit how many Sides to update.
     */
    limit?: number
  }

  /**
   * Side updateManyAndReturn
   */
  export type SideUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * The data used to update Sides.
     */
    data: XOR<SideUpdateManyMutationInput, SideUncheckedUpdateManyInput>
    /**
     * Filter which Sides to update
     */
    where?: SideWhereInput
    /**
     * Limit how many Sides to update.
     */
    limit?: number
  }

  /**
   * Side upsert
   */
  export type SideUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * The filter to search for the Side to update in case it exists.
     */
    where: SideWhereUniqueInput
    /**
     * In case the Side found by the `where` argument doesn't exist, create a new Side with this data.
     */
    create: XOR<SideCreateInput, SideUncheckedCreateInput>
    /**
     * In case the Side was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SideUpdateInput, SideUncheckedUpdateInput>
  }

  /**
   * Side delete
   */
  export type SideDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
    /**
     * Filter which Side to delete.
     */
    where: SideWhereUniqueInput
  }

  /**
   * Side deleteMany
   */
  export type SideDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sides to delete
     */
    where?: SideWhereInput
    /**
     * Limit how many Sides to delete.
     */
    limit?: number
  }

  /**
   * Side.operators
   */
  export type Side$operatorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    where?: OperatorWhereInput
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    cursor?: OperatorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Side.roundsSide
   */
  export type Side$roundsSideArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    where?: RoundWhereInput
    orderBy?: RoundOrderByWithRelationInput | RoundOrderByWithRelationInput[]
    cursor?: RoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoundScalarFieldEnum | RoundScalarFieldEnum[]
  }

  /**
   * Side without action
   */
  export type SideDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Side
     */
    select?: SideSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Side
     */
    omit?: SideOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SideInclude<ExtArgs> | null
  }


  /**
   * Model GameMode
   */

  export type AggregateGameMode = {
    _count: GameModeCountAggregateOutputType | null
    _min: GameModeMinAggregateOutputType | null
    _max: GameModeMaxAggregateOutputType | null
  }

  export type GameModeMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type GameModeMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type GameModeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type GameModeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type GameModeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type GameModeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type GameModeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameMode to aggregate.
     */
    where?: GameModeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameModes to fetch.
     */
    orderBy?: GameModeOrderByWithRelationInput | GameModeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameModeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameModes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameModes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameModes
    **/
    _count?: true | GameModeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameModeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameModeMaxAggregateInputType
  }

  export type GetGameModeAggregateType<T extends GameModeAggregateArgs> = {
        [P in keyof T & keyof AggregateGameMode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameMode[P]>
      : GetScalarType<T[P], AggregateGameMode[P]>
  }




  export type GameModeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameModeWhereInput
    orderBy?: GameModeOrderByWithAggregationInput | GameModeOrderByWithAggregationInput[]
    by: GameModeScalarFieldEnum[] | GameModeScalarFieldEnum
    having?: GameModeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameModeCountAggregateInputType | true
    _min?: GameModeMinAggregateInputType
    _max?: GameModeMaxAggregateInputType
  }

  export type GameModeGroupByOutputType = {
    id: string
    name: string
    _count: GameModeCountAggregateOutputType | null
    _min: GameModeMinAggregateOutputType | null
    _max: GameModeMaxAggregateOutputType | null
  }

  type GetGameModeGroupByPayload<T extends GameModeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameModeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameModeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameModeGroupByOutputType[P]>
            : GetScalarType<T[P], GameModeGroupByOutputType[P]>
        }
      >
    >


  export type GameModeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    games?: boolean | GameMode$gamesArgs<ExtArgs>
    _count?: boolean | GameModeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameMode"]>

  export type GameModeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["gameMode"]>

  export type GameModeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["gameMode"]>

  export type GameModeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type GameModeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["gameMode"]>
  export type GameModeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | GameMode$gamesArgs<ExtArgs>
    _count?: boolean | GameModeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameModeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameModeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GameModePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameMode"
    objects: {
      games: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["gameMode"]>
    composites: {}
  }

  type GameModeGetPayload<S extends boolean | null | undefined | GameModeDefaultArgs> = $Result.GetResult<Prisma.$GameModePayload, S>

  type GameModeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameModeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameModeCountAggregateInputType | true
    }

  export interface GameModeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameMode'], meta: { name: 'GameMode' } }
    /**
     * Find zero or one GameMode that matches the filter.
     * @param {GameModeFindUniqueArgs} args - Arguments to find a GameMode
     * @example
     * // Get one GameMode
     * const gameMode = await prisma.gameMode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameModeFindUniqueArgs>(args: SelectSubset<T, GameModeFindUniqueArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameMode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameModeFindUniqueOrThrowArgs} args - Arguments to find a GameMode
     * @example
     * // Get one GameMode
     * const gameMode = await prisma.gameMode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameModeFindUniqueOrThrowArgs>(args: SelectSubset<T, GameModeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameMode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameModeFindFirstArgs} args - Arguments to find a GameMode
     * @example
     * // Get one GameMode
     * const gameMode = await prisma.gameMode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameModeFindFirstArgs>(args?: SelectSubset<T, GameModeFindFirstArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameMode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameModeFindFirstOrThrowArgs} args - Arguments to find a GameMode
     * @example
     * // Get one GameMode
     * const gameMode = await prisma.gameMode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameModeFindFirstOrThrowArgs>(args?: SelectSubset<T, GameModeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameModes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameModeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameModes
     * const gameModes = await prisma.gameMode.findMany()
     * 
     * // Get first 10 GameModes
     * const gameModes = await prisma.gameMode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameModeWithIdOnly = await prisma.gameMode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameModeFindManyArgs>(args?: SelectSubset<T, GameModeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameMode.
     * @param {GameModeCreateArgs} args - Arguments to create a GameMode.
     * @example
     * // Create one GameMode
     * const GameMode = await prisma.gameMode.create({
     *   data: {
     *     // ... data to create a GameMode
     *   }
     * })
     * 
     */
    create<T extends GameModeCreateArgs>(args: SelectSubset<T, GameModeCreateArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameModes.
     * @param {GameModeCreateManyArgs} args - Arguments to create many GameModes.
     * @example
     * // Create many GameModes
     * const gameMode = await prisma.gameMode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameModeCreateManyArgs>(args?: SelectSubset<T, GameModeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameModes and returns the data saved in the database.
     * @param {GameModeCreateManyAndReturnArgs} args - Arguments to create many GameModes.
     * @example
     * // Create many GameModes
     * const gameMode = await prisma.gameMode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameModes and only return the `id`
     * const gameModeWithIdOnly = await prisma.gameMode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameModeCreateManyAndReturnArgs>(args?: SelectSubset<T, GameModeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameMode.
     * @param {GameModeDeleteArgs} args - Arguments to delete one GameMode.
     * @example
     * // Delete one GameMode
     * const GameMode = await prisma.gameMode.delete({
     *   where: {
     *     // ... filter to delete one GameMode
     *   }
     * })
     * 
     */
    delete<T extends GameModeDeleteArgs>(args: SelectSubset<T, GameModeDeleteArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameMode.
     * @param {GameModeUpdateArgs} args - Arguments to update one GameMode.
     * @example
     * // Update one GameMode
     * const gameMode = await prisma.gameMode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameModeUpdateArgs>(args: SelectSubset<T, GameModeUpdateArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameModes.
     * @param {GameModeDeleteManyArgs} args - Arguments to filter GameModes to delete.
     * @example
     * // Delete a few GameModes
     * const { count } = await prisma.gameMode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameModeDeleteManyArgs>(args?: SelectSubset<T, GameModeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameModes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameModeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameModes
     * const gameMode = await prisma.gameMode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameModeUpdateManyArgs>(args: SelectSubset<T, GameModeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameModes and returns the data updated in the database.
     * @param {GameModeUpdateManyAndReturnArgs} args - Arguments to update many GameModes.
     * @example
     * // Update many GameModes
     * const gameMode = await prisma.gameMode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameModes and only return the `id`
     * const gameModeWithIdOnly = await prisma.gameMode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameModeUpdateManyAndReturnArgs>(args: SelectSubset<T, GameModeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameMode.
     * @param {GameModeUpsertArgs} args - Arguments to update or create a GameMode.
     * @example
     * // Update or create a GameMode
     * const gameMode = await prisma.gameMode.upsert({
     *   create: {
     *     // ... data to create a GameMode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameMode we want to update
     *   }
     * })
     */
    upsert<T extends GameModeUpsertArgs>(args: SelectSubset<T, GameModeUpsertArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameModes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameModeCountArgs} args - Arguments to filter GameModes to count.
     * @example
     * // Count the number of GameModes
     * const count = await prisma.gameMode.count({
     *   where: {
     *     // ... the filter for the GameModes we want to count
     *   }
     * })
    **/
    count<T extends GameModeCountArgs>(
      args?: Subset<T, GameModeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameModeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameMode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameModeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameModeAggregateArgs>(args: Subset<T, GameModeAggregateArgs>): Prisma.PrismaPromise<GetGameModeAggregateType<T>>

    /**
     * Group by GameMode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameModeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameModeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameModeGroupByArgs['orderBy'] }
        : { orderBy?: GameModeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameModeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameModeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameMode model
   */
  readonly fields: GameModeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameMode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameModeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    games<T extends GameMode$gamesArgs<ExtArgs> = {}>(args?: Subset<T, GameMode$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameMode model
   */
  interface GameModeFieldRefs {
    readonly id: FieldRef<"GameMode", 'String'>
    readonly name: FieldRef<"GameMode", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GameMode findUnique
   */
  export type GameModeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * Filter, which GameMode to fetch.
     */
    where: GameModeWhereUniqueInput
  }

  /**
   * GameMode findUniqueOrThrow
   */
  export type GameModeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * Filter, which GameMode to fetch.
     */
    where: GameModeWhereUniqueInput
  }

  /**
   * GameMode findFirst
   */
  export type GameModeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * Filter, which GameMode to fetch.
     */
    where?: GameModeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameModes to fetch.
     */
    orderBy?: GameModeOrderByWithRelationInput | GameModeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameModes.
     */
    cursor?: GameModeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameModes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameModes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameModes.
     */
    distinct?: GameModeScalarFieldEnum | GameModeScalarFieldEnum[]
  }

  /**
   * GameMode findFirstOrThrow
   */
  export type GameModeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * Filter, which GameMode to fetch.
     */
    where?: GameModeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameModes to fetch.
     */
    orderBy?: GameModeOrderByWithRelationInput | GameModeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameModes.
     */
    cursor?: GameModeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameModes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameModes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameModes.
     */
    distinct?: GameModeScalarFieldEnum | GameModeScalarFieldEnum[]
  }

  /**
   * GameMode findMany
   */
  export type GameModeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * Filter, which GameModes to fetch.
     */
    where?: GameModeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameModes to fetch.
     */
    orderBy?: GameModeOrderByWithRelationInput | GameModeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameModes.
     */
    cursor?: GameModeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameModes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameModes.
     */
    skip?: number
    distinct?: GameModeScalarFieldEnum | GameModeScalarFieldEnum[]
  }

  /**
   * GameMode create
   */
  export type GameModeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * The data needed to create a GameMode.
     */
    data: XOR<GameModeCreateInput, GameModeUncheckedCreateInput>
  }

  /**
   * GameMode createMany
   */
  export type GameModeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameModes.
     */
    data: GameModeCreateManyInput | GameModeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameMode createManyAndReturn
   */
  export type GameModeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * The data used to create many GameModes.
     */
    data: GameModeCreateManyInput | GameModeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameMode update
   */
  export type GameModeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * The data needed to update a GameMode.
     */
    data: XOR<GameModeUpdateInput, GameModeUncheckedUpdateInput>
    /**
     * Choose, which GameMode to update.
     */
    where: GameModeWhereUniqueInput
  }

  /**
   * GameMode updateMany
   */
  export type GameModeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameModes.
     */
    data: XOR<GameModeUpdateManyMutationInput, GameModeUncheckedUpdateManyInput>
    /**
     * Filter which GameModes to update
     */
    where?: GameModeWhereInput
    /**
     * Limit how many GameModes to update.
     */
    limit?: number
  }

  /**
   * GameMode updateManyAndReturn
   */
  export type GameModeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * The data used to update GameModes.
     */
    data: XOR<GameModeUpdateManyMutationInput, GameModeUncheckedUpdateManyInput>
    /**
     * Filter which GameModes to update
     */
    where?: GameModeWhereInput
    /**
     * Limit how many GameModes to update.
     */
    limit?: number
  }

  /**
   * GameMode upsert
   */
  export type GameModeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * The filter to search for the GameMode to update in case it exists.
     */
    where: GameModeWhereUniqueInput
    /**
     * In case the GameMode found by the `where` argument doesn't exist, create a new GameMode with this data.
     */
    create: XOR<GameModeCreateInput, GameModeUncheckedCreateInput>
    /**
     * In case the GameMode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameModeUpdateInput, GameModeUncheckedUpdateInput>
  }

  /**
   * GameMode delete
   */
  export type GameModeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    /**
     * Filter which GameMode to delete.
     */
    where: GameModeWhereUniqueInput
  }

  /**
   * GameMode deleteMany
   */
  export type GameModeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameModes to delete
     */
    where?: GameModeWhereInput
    /**
     * Limit how many GameModes to delete.
     */
    limit?: number
  }

  /**
   * GameMode.games
   */
  export type GameMode$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * GameMode without action
   */
  export type GameModeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    email: string | null
    username: string | null
    password: string | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    email: string | null
    username: string | null
    password: string | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    createdAt: number
    email: number
    username: number
    password: number
    _all: number
  }


  export type PlayerMinAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    username?: true
    password?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    username?: true
    password?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    createdAt?: true
    email?: true
    username?: true
    password?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: string
    createdAt: Date
    email: string
    username: string
    password: string
    _count: PlayerCountAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    accounts?: boolean | Player$accountsArgs<ExtArgs>
    games?: boolean | Player$gamesArgs<ExtArgs>
    rounds?: boolean | Player$roundsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
  }

  export type PlayerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "email" | "username" | "password", ExtArgs["result"]["player"]>
  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | Player$accountsArgs<ExtArgs>
    games?: boolean | Player$gamesArgs<ExtArgs>
    rounds?: boolean | Player$roundsArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PlayerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      accounts: Prisma.$PlayerAccountPayload<ExtArgs>[]
      games: Prisma.$GamePayload<ExtArgs>[]
      rounds: Prisma.$RoundPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      email: string
      username: string
      password: string
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players and returns the data updated in the database.
     * @param {PlayerUpdateManyAndReturnArgs} args - Arguments to update many Players.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends Player$accountsArgs<ExtArgs> = {}>(args?: Subset<T, Player$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    games<T extends Player$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Player$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rounds<T extends Player$roundsArgs<ExtArgs> = {}>(args?: Subset<T, Player$roundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'String'>
    readonly createdAt: FieldRef<"Player", 'DateTime'>
    readonly email: FieldRef<"Player", 'String'>
    readonly username: FieldRef<"Player", 'String'>
    readonly password: FieldRef<"Player", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
  }

  /**
   * Player updateManyAndReturn
   */
  export type PlayerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to delete.
     */
    limit?: number
  }

  /**
   * Player.accounts
   */
  export type Player$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    where?: PlayerAccountWhereInput
    orderBy?: PlayerAccountOrderByWithRelationInput | PlayerAccountOrderByWithRelationInput[]
    cursor?: PlayerAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerAccountScalarFieldEnum | PlayerAccountScalarFieldEnum[]
  }

  /**
   * Player.games
   */
  export type Player$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Player.rounds
   */
  export type Player$roundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    where?: RoundWhereInput
    orderBy?: RoundOrderByWithRelationInput | RoundOrderByWithRelationInput[]
    cursor?: RoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoundScalarFieldEnum | RoundScalarFieldEnum[]
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model PlayerAccount
   */

  export type AggregatePlayerAccount = {
    _count: PlayerAccountCountAggregateOutputType | null
    _min: PlayerAccountMinAggregateOutputType | null
    _max: PlayerAccountMaxAggregateOutputType | null
  }

  export type PlayerAccountMinAggregateOutputType = {
    id: string | null
    playerId: string | null
    platformId: string | null
    gamertag: string | null
    externalId: string | null
  }

  export type PlayerAccountMaxAggregateOutputType = {
    id: string | null
    playerId: string | null
    platformId: string | null
    gamertag: string | null
    externalId: string | null
  }

  export type PlayerAccountCountAggregateOutputType = {
    id: number
    playerId: number
    platformId: number
    gamertag: number
    externalId: number
    _all: number
  }


  export type PlayerAccountMinAggregateInputType = {
    id?: true
    playerId?: true
    platformId?: true
    gamertag?: true
    externalId?: true
  }

  export type PlayerAccountMaxAggregateInputType = {
    id?: true
    playerId?: true
    platformId?: true
    gamertag?: true
    externalId?: true
  }

  export type PlayerAccountCountAggregateInputType = {
    id?: true
    playerId?: true
    platformId?: true
    gamertag?: true
    externalId?: true
    _all?: true
  }

  export type PlayerAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerAccount to aggregate.
     */
    where?: PlayerAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAccounts to fetch.
     */
    orderBy?: PlayerAccountOrderByWithRelationInput | PlayerAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerAccounts
    **/
    _count?: true | PlayerAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerAccountMaxAggregateInputType
  }

  export type GetPlayerAccountAggregateType<T extends PlayerAccountAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerAccount[P]>
      : GetScalarType<T[P], AggregatePlayerAccount[P]>
  }




  export type PlayerAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerAccountWhereInput
    orderBy?: PlayerAccountOrderByWithAggregationInput | PlayerAccountOrderByWithAggregationInput[]
    by: PlayerAccountScalarFieldEnum[] | PlayerAccountScalarFieldEnum
    having?: PlayerAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerAccountCountAggregateInputType | true
    _min?: PlayerAccountMinAggregateInputType
    _max?: PlayerAccountMaxAggregateInputType
  }

  export type PlayerAccountGroupByOutputType = {
    id: string
    playerId: string
    platformId: string
    gamertag: string
    externalId: string | null
    _count: PlayerAccountCountAggregateOutputType | null
    _min: PlayerAccountMinAggregateOutputType | null
    _max: PlayerAccountMaxAggregateOutputType | null
  }

  type GetPlayerAccountGroupByPayload<T extends PlayerAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerAccountGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerAccountGroupByOutputType[P]>
        }
      >
    >


  export type PlayerAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    platformId?: boolean
    gamertag?: boolean
    externalId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
    games?: boolean | PlayerAccount$gamesArgs<ExtArgs>
    _count?: boolean | PlayerAccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerAccount"]>

  export type PlayerAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    platformId?: boolean
    gamertag?: boolean
    externalId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerAccount"]>

  export type PlayerAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playerId?: boolean
    platformId?: boolean
    gamertag?: boolean
    externalId?: boolean
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerAccount"]>

  export type PlayerAccountSelectScalar = {
    id?: boolean
    playerId?: boolean
    platformId?: boolean
    gamertag?: boolean
    externalId?: boolean
  }

  export type PlayerAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "playerId" | "platformId" | "gamertag" | "externalId", ExtArgs["result"]["playerAccount"]>
  export type PlayerAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
    games?: boolean | PlayerAccount$gamesArgs<ExtArgs>
    _count?: boolean | PlayerAccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlayerAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }
  export type PlayerAccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }

  export type $PlayerAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerAccount"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs>
      platform: Prisma.$PlatformPayload<ExtArgs>
      games: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      playerId: string
      platformId: string
      gamertag: string
      externalId: string | null
    }, ExtArgs["result"]["playerAccount"]>
    composites: {}
  }

  type PlayerAccountGetPayload<S extends boolean | null | undefined | PlayerAccountDefaultArgs> = $Result.GetResult<Prisma.$PlayerAccountPayload, S>

  type PlayerAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerAccountCountAggregateInputType | true
    }

  export interface PlayerAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerAccount'], meta: { name: 'PlayerAccount' } }
    /**
     * Find zero or one PlayerAccount that matches the filter.
     * @param {PlayerAccountFindUniqueArgs} args - Arguments to find a PlayerAccount
     * @example
     * // Get one PlayerAccount
     * const playerAccount = await prisma.playerAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerAccountFindUniqueArgs>(args: SelectSubset<T, PlayerAccountFindUniqueArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlayerAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerAccountFindUniqueOrThrowArgs} args - Arguments to find a PlayerAccount
     * @example
     * // Get one PlayerAccount
     * const playerAccount = await prisma.playerAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAccountFindFirstArgs} args - Arguments to find a PlayerAccount
     * @example
     * // Get one PlayerAccount
     * const playerAccount = await prisma.playerAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerAccountFindFirstArgs>(args?: SelectSubset<T, PlayerAccountFindFirstArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlayerAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAccountFindFirstOrThrowArgs} args - Arguments to find a PlayerAccount
     * @example
     * // Get one PlayerAccount
     * const playerAccount = await prisma.playerAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlayerAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerAccounts
     * const playerAccounts = await prisma.playerAccount.findMany()
     * 
     * // Get first 10 PlayerAccounts
     * const playerAccounts = await prisma.playerAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerAccountWithIdOnly = await prisma.playerAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerAccountFindManyArgs>(args?: SelectSubset<T, PlayerAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlayerAccount.
     * @param {PlayerAccountCreateArgs} args - Arguments to create a PlayerAccount.
     * @example
     * // Create one PlayerAccount
     * const PlayerAccount = await prisma.playerAccount.create({
     *   data: {
     *     // ... data to create a PlayerAccount
     *   }
     * })
     * 
     */
    create<T extends PlayerAccountCreateArgs>(args: SelectSubset<T, PlayerAccountCreateArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlayerAccounts.
     * @param {PlayerAccountCreateManyArgs} args - Arguments to create many PlayerAccounts.
     * @example
     * // Create many PlayerAccounts
     * const playerAccount = await prisma.playerAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerAccountCreateManyArgs>(args?: SelectSubset<T, PlayerAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerAccounts and returns the data saved in the database.
     * @param {PlayerAccountCreateManyAndReturnArgs} args - Arguments to create many PlayerAccounts.
     * @example
     * // Create many PlayerAccounts
     * const playerAccount = await prisma.playerAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerAccounts and only return the `id`
     * const playerAccountWithIdOnly = await prisma.playerAccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlayerAccount.
     * @param {PlayerAccountDeleteArgs} args - Arguments to delete one PlayerAccount.
     * @example
     * // Delete one PlayerAccount
     * const PlayerAccount = await prisma.playerAccount.delete({
     *   where: {
     *     // ... filter to delete one PlayerAccount
     *   }
     * })
     * 
     */
    delete<T extends PlayerAccountDeleteArgs>(args: SelectSubset<T, PlayerAccountDeleteArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlayerAccount.
     * @param {PlayerAccountUpdateArgs} args - Arguments to update one PlayerAccount.
     * @example
     * // Update one PlayerAccount
     * const playerAccount = await prisma.playerAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerAccountUpdateArgs>(args: SelectSubset<T, PlayerAccountUpdateArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlayerAccounts.
     * @param {PlayerAccountDeleteManyArgs} args - Arguments to filter PlayerAccounts to delete.
     * @example
     * // Delete a few PlayerAccounts
     * const { count } = await prisma.playerAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerAccountDeleteManyArgs>(args?: SelectSubset<T, PlayerAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerAccounts
     * const playerAccount = await prisma.playerAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerAccountUpdateManyArgs>(args: SelectSubset<T, PlayerAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerAccounts and returns the data updated in the database.
     * @param {PlayerAccountUpdateManyAndReturnArgs} args - Arguments to update many PlayerAccounts.
     * @example
     * // Update many PlayerAccounts
     * const playerAccount = await prisma.playerAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlayerAccounts and only return the `id`
     * const playerAccountWithIdOnly = await prisma.playerAccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlayerAccount.
     * @param {PlayerAccountUpsertArgs} args - Arguments to update or create a PlayerAccount.
     * @example
     * // Update or create a PlayerAccount
     * const playerAccount = await prisma.playerAccount.upsert({
     *   create: {
     *     // ... data to create a PlayerAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerAccount we want to update
     *   }
     * })
     */
    upsert<T extends PlayerAccountUpsertArgs>(args: SelectSubset<T, PlayerAccountUpsertArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlayerAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAccountCountArgs} args - Arguments to filter PlayerAccounts to count.
     * @example
     * // Count the number of PlayerAccounts
     * const count = await prisma.playerAccount.count({
     *   where: {
     *     // ... the filter for the PlayerAccounts we want to count
     *   }
     * })
    **/
    count<T extends PlayerAccountCountArgs>(
      args?: Subset<T, PlayerAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAccountAggregateArgs>(args: Subset<T, PlayerAccountAggregateArgs>): Prisma.PrismaPromise<GetPlayerAccountAggregateType<T>>

    /**
     * Group by PlayerAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerAccountGroupByArgs['orderBy'] }
        : { orderBy?: PlayerAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerAccount model
   */
  readonly fields: PlayerAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    platform<T extends PlatformDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlatformDefaultArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    games<T extends PlayerAccount$gamesArgs<ExtArgs> = {}>(args?: Subset<T, PlayerAccount$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerAccount model
   */
  interface PlayerAccountFieldRefs {
    readonly id: FieldRef<"PlayerAccount", 'String'>
    readonly playerId: FieldRef<"PlayerAccount", 'String'>
    readonly platformId: FieldRef<"PlayerAccount", 'String'>
    readonly gamertag: FieldRef<"PlayerAccount", 'String'>
    readonly externalId: FieldRef<"PlayerAccount", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlayerAccount findUnique
   */
  export type PlayerAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAccount to fetch.
     */
    where: PlayerAccountWhereUniqueInput
  }

  /**
   * PlayerAccount findUniqueOrThrow
   */
  export type PlayerAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAccount to fetch.
     */
    where: PlayerAccountWhereUniqueInput
  }

  /**
   * PlayerAccount findFirst
   */
  export type PlayerAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAccount to fetch.
     */
    where?: PlayerAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAccounts to fetch.
     */
    orderBy?: PlayerAccountOrderByWithRelationInput | PlayerAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerAccounts.
     */
    cursor?: PlayerAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerAccounts.
     */
    distinct?: PlayerAccountScalarFieldEnum | PlayerAccountScalarFieldEnum[]
  }

  /**
   * PlayerAccount findFirstOrThrow
   */
  export type PlayerAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAccount to fetch.
     */
    where?: PlayerAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAccounts to fetch.
     */
    orderBy?: PlayerAccountOrderByWithRelationInput | PlayerAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerAccounts.
     */
    cursor?: PlayerAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerAccounts.
     */
    distinct?: PlayerAccountScalarFieldEnum | PlayerAccountScalarFieldEnum[]
  }

  /**
   * PlayerAccount findMany
   */
  export type PlayerAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * Filter, which PlayerAccounts to fetch.
     */
    where?: PlayerAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerAccounts to fetch.
     */
    orderBy?: PlayerAccountOrderByWithRelationInput | PlayerAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerAccounts.
     */
    cursor?: PlayerAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerAccounts.
     */
    skip?: number
    distinct?: PlayerAccountScalarFieldEnum | PlayerAccountScalarFieldEnum[]
  }

  /**
   * PlayerAccount create
   */
  export type PlayerAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerAccount.
     */
    data: XOR<PlayerAccountCreateInput, PlayerAccountUncheckedCreateInput>
  }

  /**
   * PlayerAccount createMany
   */
  export type PlayerAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerAccounts.
     */
    data: PlayerAccountCreateManyInput | PlayerAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerAccount createManyAndReturn
   */
  export type PlayerAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * The data used to create many PlayerAccounts.
     */
    data: PlayerAccountCreateManyInput | PlayerAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerAccount update
   */
  export type PlayerAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerAccount.
     */
    data: XOR<PlayerAccountUpdateInput, PlayerAccountUncheckedUpdateInput>
    /**
     * Choose, which PlayerAccount to update.
     */
    where: PlayerAccountWhereUniqueInput
  }

  /**
   * PlayerAccount updateMany
   */
  export type PlayerAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerAccounts.
     */
    data: XOR<PlayerAccountUpdateManyMutationInput, PlayerAccountUncheckedUpdateManyInput>
    /**
     * Filter which PlayerAccounts to update
     */
    where?: PlayerAccountWhereInput
    /**
     * Limit how many PlayerAccounts to update.
     */
    limit?: number
  }

  /**
   * PlayerAccount updateManyAndReturn
   */
  export type PlayerAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * The data used to update PlayerAccounts.
     */
    data: XOR<PlayerAccountUpdateManyMutationInput, PlayerAccountUncheckedUpdateManyInput>
    /**
     * Filter which PlayerAccounts to update
     */
    where?: PlayerAccountWhereInput
    /**
     * Limit how many PlayerAccounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerAccount upsert
   */
  export type PlayerAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerAccount to update in case it exists.
     */
    where: PlayerAccountWhereUniqueInput
    /**
     * In case the PlayerAccount found by the `where` argument doesn't exist, create a new PlayerAccount with this data.
     */
    create: XOR<PlayerAccountCreateInput, PlayerAccountUncheckedCreateInput>
    /**
     * In case the PlayerAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerAccountUpdateInput, PlayerAccountUncheckedUpdateInput>
  }

  /**
   * PlayerAccount delete
   */
  export type PlayerAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    /**
     * Filter which PlayerAccount to delete.
     */
    where: PlayerAccountWhereUniqueInput
  }

  /**
   * PlayerAccount deleteMany
   */
  export type PlayerAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerAccounts to delete
     */
    where?: PlayerAccountWhereInput
    /**
     * Limit how many PlayerAccounts to delete.
     */
    limit?: number
  }

  /**
   * PlayerAccount.games
   */
  export type PlayerAccount$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * PlayerAccount without action
   */
  export type PlayerAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
  }


  /**
   * Model Map
   */

  export type AggregateMap = {
    _count: MapCountAggregateOutputType | null
    _min: MapMinAggregateOutputType | null
    _max: MapMaxAggregateOutputType | null
  }

  export type MapMinAggregateOutputType = {
    id: string | null
    name: string | null
    nameFr: string | null
    url: string | null
  }

  export type MapMaxAggregateOutputType = {
    id: string | null
    name: string | null
    nameFr: string | null
    url: string | null
  }

  export type MapCountAggregateOutputType = {
    id: number
    name: number
    nameFr: number
    url: number
    _all: number
  }


  export type MapMinAggregateInputType = {
    id?: true
    name?: true
    nameFr?: true
    url?: true
  }

  export type MapMaxAggregateInputType = {
    id?: true
    name?: true
    nameFr?: true
    url?: true
  }

  export type MapCountAggregateInputType = {
    id?: true
    name?: true
    nameFr?: true
    url?: true
    _all?: true
  }

  export type MapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Map to aggregate.
     */
    where?: MapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maps to fetch.
     */
    orderBy?: MapOrderByWithRelationInput | MapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Maps
    **/
    _count?: true | MapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MapMaxAggregateInputType
  }

  export type GetMapAggregateType<T extends MapAggregateArgs> = {
        [P in keyof T & keyof AggregateMap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMap[P]>
      : GetScalarType<T[P], AggregateMap[P]>
  }




  export type MapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MapWhereInput
    orderBy?: MapOrderByWithAggregationInput | MapOrderByWithAggregationInput[]
    by: MapScalarFieldEnum[] | MapScalarFieldEnum
    having?: MapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MapCountAggregateInputType | true
    _min?: MapMinAggregateInputType
    _max?: MapMaxAggregateInputType
  }

  export type MapGroupByOutputType = {
    id: string
    name: string
    nameFr: string
    url: string
    _count: MapCountAggregateOutputType | null
    _min: MapMinAggregateOutputType | null
    _max: MapMaxAggregateOutputType | null
  }

  type GetMapGroupByPayload<T extends MapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MapGroupByOutputType[P]>
            : GetScalarType<T[P], MapGroupByOutputType[P]>
        }
      >
    >


  export type MapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameFr?: boolean
    url?: boolean
    games?: boolean | Map$gamesArgs<ExtArgs>
    _count?: boolean | MapCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["map"]>

  export type MapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameFr?: boolean
    url?: boolean
  }, ExtArgs["result"]["map"]>

  export type MapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    nameFr?: boolean
    url?: boolean
  }, ExtArgs["result"]["map"]>

  export type MapSelectScalar = {
    id?: boolean
    name?: boolean
    nameFr?: boolean
    url?: boolean
  }

  export type MapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "nameFr" | "url", ExtArgs["result"]["map"]>
  export type MapInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | Map$gamesArgs<ExtArgs>
    _count?: boolean | MapCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MapIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MapIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Map"
    objects: {
      games: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      nameFr: string
      url: string
    }, ExtArgs["result"]["map"]>
    composites: {}
  }

  type MapGetPayload<S extends boolean | null | undefined | MapDefaultArgs> = $Result.GetResult<Prisma.$MapPayload, S>

  type MapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MapCountAggregateInputType | true
    }

  export interface MapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Map'], meta: { name: 'Map' } }
    /**
     * Find zero or one Map that matches the filter.
     * @param {MapFindUniqueArgs} args - Arguments to find a Map
     * @example
     * // Get one Map
     * const map = await prisma.map.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MapFindUniqueArgs>(args: SelectSubset<T, MapFindUniqueArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Map that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MapFindUniqueOrThrowArgs} args - Arguments to find a Map
     * @example
     * // Get one Map
     * const map = await prisma.map.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MapFindUniqueOrThrowArgs>(args: SelectSubset<T, MapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Map that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapFindFirstArgs} args - Arguments to find a Map
     * @example
     * // Get one Map
     * const map = await prisma.map.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MapFindFirstArgs>(args?: SelectSubset<T, MapFindFirstArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Map that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapFindFirstOrThrowArgs} args - Arguments to find a Map
     * @example
     * // Get one Map
     * const map = await prisma.map.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MapFindFirstOrThrowArgs>(args?: SelectSubset<T, MapFindFirstOrThrowArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Maps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Maps
     * const maps = await prisma.map.findMany()
     * 
     * // Get first 10 Maps
     * const maps = await prisma.map.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mapWithIdOnly = await prisma.map.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MapFindManyArgs>(args?: SelectSubset<T, MapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Map.
     * @param {MapCreateArgs} args - Arguments to create a Map.
     * @example
     * // Create one Map
     * const Map = await prisma.map.create({
     *   data: {
     *     // ... data to create a Map
     *   }
     * })
     * 
     */
    create<T extends MapCreateArgs>(args: SelectSubset<T, MapCreateArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Maps.
     * @param {MapCreateManyArgs} args - Arguments to create many Maps.
     * @example
     * // Create many Maps
     * const map = await prisma.map.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MapCreateManyArgs>(args?: SelectSubset<T, MapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Maps and returns the data saved in the database.
     * @param {MapCreateManyAndReturnArgs} args - Arguments to create many Maps.
     * @example
     * // Create many Maps
     * const map = await prisma.map.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Maps and only return the `id`
     * const mapWithIdOnly = await prisma.map.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MapCreateManyAndReturnArgs>(args?: SelectSubset<T, MapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Map.
     * @param {MapDeleteArgs} args - Arguments to delete one Map.
     * @example
     * // Delete one Map
     * const Map = await prisma.map.delete({
     *   where: {
     *     // ... filter to delete one Map
     *   }
     * })
     * 
     */
    delete<T extends MapDeleteArgs>(args: SelectSubset<T, MapDeleteArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Map.
     * @param {MapUpdateArgs} args - Arguments to update one Map.
     * @example
     * // Update one Map
     * const map = await prisma.map.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MapUpdateArgs>(args: SelectSubset<T, MapUpdateArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Maps.
     * @param {MapDeleteManyArgs} args - Arguments to filter Maps to delete.
     * @example
     * // Delete a few Maps
     * const { count } = await prisma.map.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MapDeleteManyArgs>(args?: SelectSubset<T, MapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Maps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Maps
     * const map = await prisma.map.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MapUpdateManyArgs>(args: SelectSubset<T, MapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Maps and returns the data updated in the database.
     * @param {MapUpdateManyAndReturnArgs} args - Arguments to update many Maps.
     * @example
     * // Update many Maps
     * const map = await prisma.map.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Maps and only return the `id`
     * const mapWithIdOnly = await prisma.map.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MapUpdateManyAndReturnArgs>(args: SelectSubset<T, MapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Map.
     * @param {MapUpsertArgs} args - Arguments to update or create a Map.
     * @example
     * // Update or create a Map
     * const map = await prisma.map.upsert({
     *   create: {
     *     // ... data to create a Map
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Map we want to update
     *   }
     * })
     */
    upsert<T extends MapUpsertArgs>(args: SelectSubset<T, MapUpsertArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Maps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapCountArgs} args - Arguments to filter Maps to count.
     * @example
     * // Count the number of Maps
     * const count = await prisma.map.count({
     *   where: {
     *     // ... the filter for the Maps we want to count
     *   }
     * })
    **/
    count<T extends MapCountArgs>(
      args?: Subset<T, MapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Map.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MapAggregateArgs>(args: Subset<T, MapAggregateArgs>): Prisma.PrismaPromise<GetMapAggregateType<T>>

    /**
     * Group by Map.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MapGroupByArgs['orderBy'] }
        : { orderBy?: MapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Map model
   */
  readonly fields: MapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Map.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    games<T extends Map$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Map$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Map model
   */
  interface MapFieldRefs {
    readonly id: FieldRef<"Map", 'String'>
    readonly name: FieldRef<"Map", 'String'>
    readonly nameFr: FieldRef<"Map", 'String'>
    readonly url: FieldRef<"Map", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Map findUnique
   */
  export type MapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * Filter, which Map to fetch.
     */
    where: MapWhereUniqueInput
  }

  /**
   * Map findUniqueOrThrow
   */
  export type MapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * Filter, which Map to fetch.
     */
    where: MapWhereUniqueInput
  }

  /**
   * Map findFirst
   */
  export type MapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * Filter, which Map to fetch.
     */
    where?: MapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maps to fetch.
     */
    orderBy?: MapOrderByWithRelationInput | MapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Maps.
     */
    cursor?: MapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Maps.
     */
    distinct?: MapScalarFieldEnum | MapScalarFieldEnum[]
  }

  /**
   * Map findFirstOrThrow
   */
  export type MapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * Filter, which Map to fetch.
     */
    where?: MapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maps to fetch.
     */
    orderBy?: MapOrderByWithRelationInput | MapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Maps.
     */
    cursor?: MapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Maps.
     */
    distinct?: MapScalarFieldEnum | MapScalarFieldEnum[]
  }

  /**
   * Map findMany
   */
  export type MapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * Filter, which Maps to fetch.
     */
    where?: MapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Maps to fetch.
     */
    orderBy?: MapOrderByWithRelationInput | MapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Maps.
     */
    cursor?: MapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Maps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Maps.
     */
    skip?: number
    distinct?: MapScalarFieldEnum | MapScalarFieldEnum[]
  }

  /**
   * Map create
   */
  export type MapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * The data needed to create a Map.
     */
    data: XOR<MapCreateInput, MapUncheckedCreateInput>
  }

  /**
   * Map createMany
   */
  export type MapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Maps.
     */
    data: MapCreateManyInput | MapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Map createManyAndReturn
   */
  export type MapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * The data used to create many Maps.
     */
    data: MapCreateManyInput | MapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Map update
   */
  export type MapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * The data needed to update a Map.
     */
    data: XOR<MapUpdateInput, MapUncheckedUpdateInput>
    /**
     * Choose, which Map to update.
     */
    where: MapWhereUniqueInput
  }

  /**
   * Map updateMany
   */
  export type MapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Maps.
     */
    data: XOR<MapUpdateManyMutationInput, MapUncheckedUpdateManyInput>
    /**
     * Filter which Maps to update
     */
    where?: MapWhereInput
    /**
     * Limit how many Maps to update.
     */
    limit?: number
  }

  /**
   * Map updateManyAndReturn
   */
  export type MapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * The data used to update Maps.
     */
    data: XOR<MapUpdateManyMutationInput, MapUncheckedUpdateManyInput>
    /**
     * Filter which Maps to update
     */
    where?: MapWhereInput
    /**
     * Limit how many Maps to update.
     */
    limit?: number
  }

  /**
   * Map upsert
   */
  export type MapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * The filter to search for the Map to update in case it exists.
     */
    where: MapWhereUniqueInput
    /**
     * In case the Map found by the `where` argument doesn't exist, create a new Map with this data.
     */
    create: XOR<MapCreateInput, MapUncheckedCreateInput>
    /**
     * In case the Map was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MapUpdateInput, MapUncheckedUpdateInput>
  }

  /**
   * Map delete
   */
  export type MapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    /**
     * Filter which Map to delete.
     */
    where: MapWhereUniqueInput
  }

  /**
   * Map deleteMany
   */
  export type MapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Maps to delete
     */
    where?: MapWhereInput
    /**
     * Limit how many Maps to delete.
     */
    limit?: number
  }

  /**
   * Map.games
   */
  export type Map$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Map without action
   */
  export type MapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
  }


  /**
   * Model Operator
   */

  export type AggregateOperator = {
    _count: OperatorCountAggregateOutputType | null
    _min: OperatorMinAggregateOutputType | null
    _max: OperatorMaxAggregateOutputType | null
  }

  export type OperatorMinAggregateOutputType = {
    id: string | null
    name: string | null
    sideId: string | null
    image: string | null
    icon: string | null
  }

  export type OperatorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    sideId: string | null
    image: string | null
    icon: string | null
  }

  export type OperatorCountAggregateOutputType = {
    id: number
    name: number
    sideId: number
    image: number
    icon: number
    _all: number
  }


  export type OperatorMinAggregateInputType = {
    id?: true
    name?: true
    sideId?: true
    image?: true
    icon?: true
  }

  export type OperatorMaxAggregateInputType = {
    id?: true
    name?: true
    sideId?: true
    image?: true
    icon?: true
  }

  export type OperatorCountAggregateInputType = {
    id?: true
    name?: true
    sideId?: true
    image?: true
    icon?: true
    _all?: true
  }

  export type OperatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operator to aggregate.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Operators
    **/
    _count?: true | OperatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperatorMaxAggregateInputType
  }

  export type GetOperatorAggregateType<T extends OperatorAggregateArgs> = {
        [P in keyof T & keyof AggregateOperator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperator[P]>
      : GetScalarType<T[P], AggregateOperator[P]>
  }




  export type OperatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorWhereInput
    orderBy?: OperatorOrderByWithAggregationInput | OperatorOrderByWithAggregationInput[]
    by: OperatorScalarFieldEnum[] | OperatorScalarFieldEnum
    having?: OperatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperatorCountAggregateInputType | true
    _min?: OperatorMinAggregateInputType
    _max?: OperatorMaxAggregateInputType
  }

  export type OperatorGroupByOutputType = {
    id: string
    name: string
    sideId: string
    image: string | null
    icon: string
    _count: OperatorCountAggregateOutputType | null
    _min: OperatorMinAggregateOutputType | null
    _max: OperatorMaxAggregateOutputType | null
  }

  type GetOperatorGroupByPayload<T extends OperatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperatorGroupByOutputType[P]>
            : GetScalarType<T[P], OperatorGroupByOutputType[P]>
        }
      >
    >


  export type OperatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    sideId?: boolean
    image?: boolean
    icon?: boolean
    side?: boolean | SideDefaultArgs<ExtArgs>
    rounds?: boolean | Operator$roundsArgs<ExtArgs>
    _count?: boolean | OperatorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    sideId?: boolean
    image?: boolean
    icon?: boolean
    side?: boolean | SideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    sideId?: boolean
    image?: boolean
    icon?: boolean
    side?: boolean | SideDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectScalar = {
    id?: boolean
    name?: boolean
    sideId?: boolean
    image?: boolean
    icon?: boolean
  }

  export type OperatorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "sideId" | "image" | "icon", ExtArgs["result"]["operator"]>
  export type OperatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    side?: boolean | SideDefaultArgs<ExtArgs>
    rounds?: boolean | Operator$roundsArgs<ExtArgs>
    _count?: boolean | OperatorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OperatorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    side?: boolean | SideDefaultArgs<ExtArgs>
  }
  export type OperatorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    side?: boolean | SideDefaultArgs<ExtArgs>
  }

  export type $OperatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Operator"
    objects: {
      side: Prisma.$SidePayload<ExtArgs>
      rounds: Prisma.$RoundPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      sideId: string
      image: string | null
      icon: string
    }, ExtArgs["result"]["operator"]>
    composites: {}
  }

  type OperatorGetPayload<S extends boolean | null | undefined | OperatorDefaultArgs> = $Result.GetResult<Prisma.$OperatorPayload, S>

  type OperatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OperatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OperatorCountAggregateInputType | true
    }

  export interface OperatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operator'], meta: { name: 'Operator' } }
    /**
     * Find zero or one Operator that matches the filter.
     * @param {OperatorFindUniqueArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperatorFindUniqueArgs>(args: SelectSubset<T, OperatorFindUniqueArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Operator that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OperatorFindUniqueOrThrowArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperatorFindUniqueOrThrowArgs>(args: SelectSubset<T, OperatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindFirstArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperatorFindFirstArgs>(args?: SelectSubset<T, OperatorFindFirstArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Operator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindFirstOrThrowArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperatorFindFirstOrThrowArgs>(args?: SelectSubset<T, OperatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Operators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Operators
     * const operators = await prisma.operator.findMany()
     * 
     * // Get first 10 Operators
     * const operators = await prisma.operator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operatorWithIdOnly = await prisma.operator.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperatorFindManyArgs>(args?: SelectSubset<T, OperatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Operator.
     * @param {OperatorCreateArgs} args - Arguments to create a Operator.
     * @example
     * // Create one Operator
     * const Operator = await prisma.operator.create({
     *   data: {
     *     // ... data to create a Operator
     *   }
     * })
     * 
     */
    create<T extends OperatorCreateArgs>(args: SelectSubset<T, OperatorCreateArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Operators.
     * @param {OperatorCreateManyArgs} args - Arguments to create many Operators.
     * @example
     * // Create many Operators
     * const operator = await prisma.operator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperatorCreateManyArgs>(args?: SelectSubset<T, OperatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Operators and returns the data saved in the database.
     * @param {OperatorCreateManyAndReturnArgs} args - Arguments to create many Operators.
     * @example
     * // Create many Operators
     * const operator = await prisma.operator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Operators and only return the `id`
     * const operatorWithIdOnly = await prisma.operator.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperatorCreateManyAndReturnArgs>(args?: SelectSubset<T, OperatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Operator.
     * @param {OperatorDeleteArgs} args - Arguments to delete one Operator.
     * @example
     * // Delete one Operator
     * const Operator = await prisma.operator.delete({
     *   where: {
     *     // ... filter to delete one Operator
     *   }
     * })
     * 
     */
    delete<T extends OperatorDeleteArgs>(args: SelectSubset<T, OperatorDeleteArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Operator.
     * @param {OperatorUpdateArgs} args - Arguments to update one Operator.
     * @example
     * // Update one Operator
     * const operator = await prisma.operator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperatorUpdateArgs>(args: SelectSubset<T, OperatorUpdateArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Operators.
     * @param {OperatorDeleteManyArgs} args - Arguments to filter Operators to delete.
     * @example
     * // Delete a few Operators
     * const { count } = await prisma.operator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperatorDeleteManyArgs>(args?: SelectSubset<T, OperatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Operators
     * const operator = await prisma.operator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperatorUpdateManyArgs>(args: SelectSubset<T, OperatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operators and returns the data updated in the database.
     * @param {OperatorUpdateManyAndReturnArgs} args - Arguments to update many Operators.
     * @example
     * // Update many Operators
     * const operator = await prisma.operator.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Operators and only return the `id`
     * const operatorWithIdOnly = await prisma.operator.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OperatorUpdateManyAndReturnArgs>(args: SelectSubset<T, OperatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Operator.
     * @param {OperatorUpsertArgs} args - Arguments to update or create a Operator.
     * @example
     * // Update or create a Operator
     * const operator = await prisma.operator.upsert({
     *   create: {
     *     // ... data to create a Operator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Operator we want to update
     *   }
     * })
     */
    upsert<T extends OperatorUpsertArgs>(args: SelectSubset<T, OperatorUpsertArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Operators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorCountArgs} args - Arguments to filter Operators to count.
     * @example
     * // Count the number of Operators
     * const count = await prisma.operator.count({
     *   where: {
     *     // ... the filter for the Operators we want to count
     *   }
     * })
    **/
    count<T extends OperatorCountArgs>(
      args?: Subset<T, OperatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Operator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperatorAggregateArgs>(args: Subset<T, OperatorAggregateArgs>): Prisma.PrismaPromise<GetOperatorAggregateType<T>>

    /**
     * Group by Operator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperatorGroupByArgs['orderBy'] }
        : { orderBy?: OperatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Operator model
   */
  readonly fields: OperatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Operator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    side<T extends SideDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SideDefaultArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rounds<T extends Operator$roundsArgs<ExtArgs> = {}>(args?: Subset<T, Operator$roundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Operator model
   */
  interface OperatorFieldRefs {
    readonly id: FieldRef<"Operator", 'String'>
    readonly name: FieldRef<"Operator", 'String'>
    readonly sideId: FieldRef<"Operator", 'String'>
    readonly image: FieldRef<"Operator", 'String'>
    readonly icon: FieldRef<"Operator", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Operator findUnique
   */
  export type OperatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator findUniqueOrThrow
   */
  export type OperatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator findFirst
   */
  export type OperatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operators.
     */
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator findFirstOrThrow
   */
  export type OperatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operators.
     */
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator findMany
   */
  export type OperatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operators to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator create
   */
  export type OperatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Operator.
     */
    data: XOR<OperatorCreateInput, OperatorUncheckedCreateInput>
  }

  /**
   * Operator createMany
   */
  export type OperatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Operators.
     */
    data: OperatorCreateManyInput | OperatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operator createManyAndReturn
   */
  export type OperatorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * The data used to create many Operators.
     */
    data: OperatorCreateManyInput | OperatorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Operator update
   */
  export type OperatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Operator.
     */
    data: XOR<OperatorUpdateInput, OperatorUncheckedUpdateInput>
    /**
     * Choose, which Operator to update.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator updateMany
   */
  export type OperatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Operators.
     */
    data: XOR<OperatorUpdateManyMutationInput, OperatorUncheckedUpdateManyInput>
    /**
     * Filter which Operators to update
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to update.
     */
    limit?: number
  }

  /**
   * Operator updateManyAndReturn
   */
  export type OperatorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * The data used to update Operators.
     */
    data: XOR<OperatorUpdateManyMutationInput, OperatorUncheckedUpdateManyInput>
    /**
     * Filter which Operators to update
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Operator upsert
   */
  export type OperatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Operator to update in case it exists.
     */
    where: OperatorWhereUniqueInput
    /**
     * In case the Operator found by the `where` argument doesn't exist, create a new Operator with this data.
     */
    create: XOR<OperatorCreateInput, OperatorUncheckedCreateInput>
    /**
     * In case the Operator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperatorUpdateInput, OperatorUncheckedUpdateInput>
  }

  /**
   * Operator delete
   */
  export type OperatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter which Operator to delete.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator deleteMany
   */
  export type OperatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operators to delete
     */
    where?: OperatorWhereInput
    /**
     * Limit how many Operators to delete.
     */
    limit?: number
  }

  /**
   * Operator.rounds
   */
  export type Operator$roundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    where?: RoundWhereInput
    orderBy?: RoundOrderByWithRelationInput | RoundOrderByWithRelationInput[]
    cursor?: RoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoundScalarFieldEnum | RoundScalarFieldEnum[]
  }

  /**
   * Operator without action
   */
  export type OperatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    playerScore: number | null
    opponentScore: number | null
    roundNumber: number | null
  }

  export type GameSumAggregateOutputType = {
    playerScore: number | null
    opponentScore: number | null
    roundNumber: number | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    date: Date | null
    playerId: string | null
    mapId: string | null
    modeId: string | null
    platformId: string | null
    accountId: string | null
    playerScore: number | null
    opponentScore: number | null
    status: string | null
    overtime: boolean | null
    roundNumber: number | null
    isFinished: boolean | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    date: Date | null
    playerId: string | null
    mapId: string | null
    modeId: string | null
    platformId: string | null
    accountId: string | null
    playerScore: number | null
    opponentScore: number | null
    status: string | null
    overtime: boolean | null
    roundNumber: number | null
    isFinished: boolean | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    date: number
    playerId: number
    mapId: number
    modeId: number
    platformId: number
    accountId: number
    playerScore: number
    opponentScore: number
    status: number
    overtime: number
    roundNumber: number
    isFinished: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    playerScore?: true
    opponentScore?: true
    roundNumber?: true
  }

  export type GameSumAggregateInputType = {
    playerScore?: true
    opponentScore?: true
    roundNumber?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    date?: true
    playerId?: true
    mapId?: true
    modeId?: true
    platformId?: true
    accountId?: true
    playerScore?: true
    opponentScore?: true
    status?: true
    overtime?: true
    roundNumber?: true
    isFinished?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    date?: true
    playerId?: true
    mapId?: true
    modeId?: true
    platformId?: true
    accountId?: true
    playerScore?: true
    opponentScore?: true
    status?: true
    overtime?: true
    roundNumber?: true
    isFinished?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    date?: true
    playerId?: true
    mapId?: true
    modeId?: true
    platformId?: true
    accountId?: true
    playerScore?: true
    opponentScore?: true
    status?: true
    overtime?: true
    roundNumber?: true
    isFinished?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    date: Date | null
    playerId: string | null
    mapId: string | null
    modeId: string | null
    platformId: string | null
    accountId: string | null
    playerScore: number | null
    opponentScore: number | null
    status: string | null
    overtime: boolean | null
    roundNumber: number | null
    isFinished: boolean
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    date?: boolean
    playerId?: boolean
    mapId?: boolean
    modeId?: boolean
    platformId?: boolean
    accountId?: boolean
    playerScore?: boolean
    opponentScore?: boolean
    status?: boolean
    overtime?: boolean
    roundNumber?: boolean
    isFinished?: boolean
    player?: boolean | Game$playerArgs<ExtArgs>
    map?: boolean | Game$mapArgs<ExtArgs>
    mode?: boolean | Game$modeArgs<ExtArgs>
    platform?: boolean | Game$platformArgs<ExtArgs>
    account?: boolean | Game$accountArgs<ExtArgs>
    rounds?: boolean | Game$roundsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    date?: boolean
    playerId?: boolean
    mapId?: boolean
    modeId?: boolean
    platformId?: boolean
    accountId?: boolean
    playerScore?: boolean
    opponentScore?: boolean
    status?: boolean
    overtime?: boolean
    roundNumber?: boolean
    isFinished?: boolean
    player?: boolean | Game$playerArgs<ExtArgs>
    map?: boolean | Game$mapArgs<ExtArgs>
    mode?: boolean | Game$modeArgs<ExtArgs>
    platform?: boolean | Game$platformArgs<ExtArgs>
    account?: boolean | Game$accountArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    date?: boolean
    playerId?: boolean
    mapId?: boolean
    modeId?: boolean
    platformId?: boolean
    accountId?: boolean
    playerScore?: boolean
    opponentScore?: boolean
    status?: boolean
    overtime?: boolean
    roundNumber?: boolean
    isFinished?: boolean
    player?: boolean | Game$playerArgs<ExtArgs>
    map?: boolean | Game$mapArgs<ExtArgs>
    mode?: boolean | Game$modeArgs<ExtArgs>
    platform?: boolean | Game$platformArgs<ExtArgs>
    account?: boolean | Game$accountArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    date?: boolean
    playerId?: boolean
    mapId?: boolean
    modeId?: boolean
    platformId?: boolean
    accountId?: boolean
    playerScore?: boolean
    opponentScore?: boolean
    status?: boolean
    overtime?: boolean
    roundNumber?: boolean
    isFinished?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "date" | "playerId" | "mapId" | "modeId" | "platformId" | "accountId" | "playerScore" | "opponentScore" | "status" | "overtime" | "roundNumber" | "isFinished", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | Game$playerArgs<ExtArgs>
    map?: boolean | Game$mapArgs<ExtArgs>
    mode?: boolean | Game$modeArgs<ExtArgs>
    platform?: boolean | Game$platformArgs<ExtArgs>
    account?: boolean | Game$accountArgs<ExtArgs>
    rounds?: boolean | Game$roundsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | Game$playerArgs<ExtArgs>
    map?: boolean | Game$mapArgs<ExtArgs>
    mode?: boolean | Game$modeArgs<ExtArgs>
    platform?: boolean | Game$platformArgs<ExtArgs>
    account?: boolean | Game$accountArgs<ExtArgs>
  }
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | Game$playerArgs<ExtArgs>
    map?: boolean | Game$mapArgs<ExtArgs>
    mode?: boolean | Game$modeArgs<ExtArgs>
    platform?: boolean | Game$platformArgs<ExtArgs>
    account?: boolean | Game$accountArgs<ExtArgs>
  }

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      player: Prisma.$PlayerPayload<ExtArgs> | null
      map: Prisma.$MapPayload<ExtArgs> | null
      mode: Prisma.$GameModePayload<ExtArgs> | null
      platform: Prisma.$PlatformPayload<ExtArgs> | null
      account: Prisma.$PlayerAccountPayload<ExtArgs> | null
      rounds: Prisma.$RoundPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      date: Date | null
      playerId: string | null
      mapId: string | null
      modeId: string | null
      platformId: string | null
      accountId: string | null
      playerScore: number | null
      opponentScore: number | null
      status: string | null
      overtime: boolean | null
      roundNumber: number | null
      isFinished: boolean
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    player<T extends Game$playerArgs<ExtArgs> = {}>(args?: Subset<T, Game$playerArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    map<T extends Game$mapArgs<ExtArgs> = {}>(args?: Subset<T, Game$mapArgs<ExtArgs>>): Prisma__MapClient<$Result.GetResult<Prisma.$MapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    mode<T extends Game$modeArgs<ExtArgs> = {}>(args?: Subset<T, Game$modeArgs<ExtArgs>>): Prisma__GameModeClient<$Result.GetResult<Prisma.$GameModePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    platform<T extends Game$platformArgs<ExtArgs> = {}>(args?: Subset<T, Game$platformArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    account<T extends Game$accountArgs<ExtArgs> = {}>(args?: Subset<T, Game$accountArgs<ExtArgs>>): Prisma__PlayerAccountClient<$Result.GetResult<Prisma.$PlayerAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    rounds<T extends Game$roundsArgs<ExtArgs> = {}>(args?: Subset<T, Game$roundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'String'>
    readonly createdAt: FieldRef<"Game", 'DateTime'>
    readonly updatedAt: FieldRef<"Game", 'DateTime'>
    readonly date: FieldRef<"Game", 'DateTime'>
    readonly playerId: FieldRef<"Game", 'String'>
    readonly mapId: FieldRef<"Game", 'String'>
    readonly modeId: FieldRef<"Game", 'String'>
    readonly platformId: FieldRef<"Game", 'String'>
    readonly accountId: FieldRef<"Game", 'String'>
    readonly playerScore: FieldRef<"Game", 'Int'>
    readonly opponentScore: FieldRef<"Game", 'Int'>
    readonly status: FieldRef<"Game", 'String'>
    readonly overtime: FieldRef<"Game", 'Boolean'>
    readonly roundNumber: FieldRef<"Game", 'Int'>
    readonly isFinished: FieldRef<"Game", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.player
   */
  export type Game$playerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
  }

  /**
   * Game.map
   */
  export type Game$mapArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Map
     */
    select?: MapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Map
     */
    omit?: MapOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MapInclude<ExtArgs> | null
    where?: MapWhereInput
  }

  /**
   * Game.mode
   */
  export type Game$modeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameMode
     */
    select?: GameModeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameMode
     */
    omit?: GameModeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameModeInclude<ExtArgs> | null
    where?: GameModeWhereInput
  }

  /**
   * Game.platform
   */
  export type Game$platformArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    where?: PlatformWhereInput
  }

  /**
   * Game.account
   */
  export type Game$accountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerAccount
     */
    select?: PlayerAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlayerAccount
     */
    omit?: PlayerAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerAccountInclude<ExtArgs> | null
    where?: PlayerAccountWhereInput
  }

  /**
   * Game.rounds
   */
  export type Game$roundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    where?: RoundWhereInput
    orderBy?: RoundOrderByWithRelationInput | RoundOrderByWithRelationInput[]
    cursor?: RoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoundScalarFieldEnum | RoundScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model Round
   */

  export type AggregateRound = {
    _count: RoundCountAggregateOutputType | null
    _avg: RoundAvgAggregateOutputType | null
    _sum: RoundSumAggregateOutputType | null
    _min: RoundMinAggregateOutputType | null
    _max: RoundMaxAggregateOutputType | null
  }

  export type RoundAvgAggregateOutputType = {
    roundNumber: number | null
    kills: number | null
    assists: number | null
    points: number | null
  }

  export type RoundSumAggregateOutputType = {
    roundNumber: number | null
    kills: number | null
    assists: number | null
    points: number | null
  }

  export type RoundMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    gameId: string | null
    playerId: string | null
    roundNumber: number | null
    sideId: string | null
    operatorId: string | null
    roundResult: string | null
    kills: number | null
    death: boolean | null
    assists: number | null
    disconnected: boolean | null
    points: number | null
    isFinished: boolean | null
  }

  export type RoundMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    gameId: string | null
    playerId: string | null
    roundNumber: number | null
    sideId: string | null
    operatorId: string | null
    roundResult: string | null
    kills: number | null
    death: boolean | null
    assists: number | null
    disconnected: boolean | null
    points: number | null
    isFinished: boolean | null
  }

  export type RoundCountAggregateOutputType = {
    id: number
    createdAt: number
    gameId: number
    playerId: number
    roundNumber: number
    sideId: number
    operatorId: number
    roundResult: number
    kills: number
    death: number
    assists: number
    disconnected: number
    points: number
    isFinished: number
    _all: number
  }


  export type RoundAvgAggregateInputType = {
    roundNumber?: true
    kills?: true
    assists?: true
    points?: true
  }

  export type RoundSumAggregateInputType = {
    roundNumber?: true
    kills?: true
    assists?: true
    points?: true
  }

  export type RoundMinAggregateInputType = {
    id?: true
    createdAt?: true
    gameId?: true
    playerId?: true
    roundNumber?: true
    sideId?: true
    operatorId?: true
    roundResult?: true
    kills?: true
    death?: true
    assists?: true
    disconnected?: true
    points?: true
    isFinished?: true
  }

  export type RoundMaxAggregateInputType = {
    id?: true
    createdAt?: true
    gameId?: true
    playerId?: true
    roundNumber?: true
    sideId?: true
    operatorId?: true
    roundResult?: true
    kills?: true
    death?: true
    assists?: true
    disconnected?: true
    points?: true
    isFinished?: true
  }

  export type RoundCountAggregateInputType = {
    id?: true
    createdAt?: true
    gameId?: true
    playerId?: true
    roundNumber?: true
    sideId?: true
    operatorId?: true
    roundResult?: true
    kills?: true
    death?: true
    assists?: true
    disconnected?: true
    points?: true
    isFinished?: true
    _all?: true
  }

  export type RoundAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Round to aggregate.
     */
    where?: RoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rounds to fetch.
     */
    orderBy?: RoundOrderByWithRelationInput | RoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rounds
    **/
    _count?: true | RoundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoundMaxAggregateInputType
  }

  export type GetRoundAggregateType<T extends RoundAggregateArgs> = {
        [P in keyof T & keyof AggregateRound]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRound[P]>
      : GetScalarType<T[P], AggregateRound[P]>
  }




  export type RoundGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoundWhereInput
    orderBy?: RoundOrderByWithAggregationInput | RoundOrderByWithAggregationInput[]
    by: RoundScalarFieldEnum[] | RoundScalarFieldEnum
    having?: RoundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoundCountAggregateInputType | true
    _avg?: RoundAvgAggregateInputType
    _sum?: RoundSumAggregateInputType
    _min?: RoundMinAggregateInputType
    _max?: RoundMaxAggregateInputType
  }

  export type RoundGroupByOutputType = {
    id: string
    createdAt: Date
    gameId: string
    playerId: string
    roundNumber: number
    sideId: string
    operatorId: string | null
    roundResult: string | null
    kills: number
    death: boolean
    assists: number
    disconnected: boolean
    points: number
    isFinished: boolean
    _count: RoundCountAggregateOutputType | null
    _avg: RoundAvgAggregateOutputType | null
    _sum: RoundSumAggregateOutputType | null
    _min: RoundMinAggregateOutputType | null
    _max: RoundMaxAggregateOutputType | null
  }

  type GetRoundGroupByPayload<T extends RoundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoundGroupByOutputType[P]>
            : GetScalarType<T[P], RoundGroupByOutputType[P]>
        }
      >
    >


  export type RoundSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    gameId?: boolean
    playerId?: boolean
    roundNumber?: boolean
    sideId?: boolean
    operatorId?: boolean
    roundResult?: boolean
    kills?: boolean
    death?: boolean
    assists?: boolean
    disconnected?: boolean
    points?: boolean
    isFinished?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    side?: boolean | SideDefaultArgs<ExtArgs>
    operator?: boolean | Round$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["round"]>

  export type RoundSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    gameId?: boolean
    playerId?: boolean
    roundNumber?: boolean
    sideId?: boolean
    operatorId?: boolean
    roundResult?: boolean
    kills?: boolean
    death?: boolean
    assists?: boolean
    disconnected?: boolean
    points?: boolean
    isFinished?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    side?: boolean | SideDefaultArgs<ExtArgs>
    operator?: boolean | Round$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["round"]>

  export type RoundSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    gameId?: boolean
    playerId?: boolean
    roundNumber?: boolean
    sideId?: boolean
    operatorId?: boolean
    roundResult?: boolean
    kills?: boolean
    death?: boolean
    assists?: boolean
    disconnected?: boolean
    points?: boolean
    isFinished?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    side?: boolean | SideDefaultArgs<ExtArgs>
    operator?: boolean | Round$operatorArgs<ExtArgs>
  }, ExtArgs["result"]["round"]>

  export type RoundSelectScalar = {
    id?: boolean
    createdAt?: boolean
    gameId?: boolean
    playerId?: boolean
    roundNumber?: boolean
    sideId?: boolean
    operatorId?: boolean
    roundResult?: boolean
    kills?: boolean
    death?: boolean
    assists?: boolean
    disconnected?: boolean
    points?: boolean
    isFinished?: boolean
  }

  export type RoundOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "gameId" | "playerId" | "roundNumber" | "sideId" | "operatorId" | "roundResult" | "kills" | "death" | "assists" | "disconnected" | "points" | "isFinished", ExtArgs["result"]["round"]>
  export type RoundInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    side?: boolean | SideDefaultArgs<ExtArgs>
    operator?: boolean | Round$operatorArgs<ExtArgs>
  }
  export type RoundIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    side?: boolean | SideDefaultArgs<ExtArgs>
    operator?: boolean | Round$operatorArgs<ExtArgs>
  }
  export type RoundIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
    side?: boolean | SideDefaultArgs<ExtArgs>
    operator?: boolean | Round$operatorArgs<ExtArgs>
  }

  export type $RoundPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Round"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      player: Prisma.$PlayerPayload<ExtArgs>
      side: Prisma.$SidePayload<ExtArgs>
      operator: Prisma.$OperatorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      gameId: string
      playerId: string
      roundNumber: number
      sideId: string
      operatorId: string | null
      roundResult: string | null
      kills: number
      death: boolean
      assists: number
      disconnected: boolean
      points: number
      isFinished: boolean
    }, ExtArgs["result"]["round"]>
    composites: {}
  }

  type RoundGetPayload<S extends boolean | null | undefined | RoundDefaultArgs> = $Result.GetResult<Prisma.$RoundPayload, S>

  type RoundCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoundFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoundCountAggregateInputType | true
    }

  export interface RoundDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Round'], meta: { name: 'Round' } }
    /**
     * Find zero or one Round that matches the filter.
     * @param {RoundFindUniqueArgs} args - Arguments to find a Round
     * @example
     * // Get one Round
     * const round = await prisma.round.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoundFindUniqueArgs>(args: SelectSubset<T, RoundFindUniqueArgs<ExtArgs>>): Prisma__RoundClient<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Round that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoundFindUniqueOrThrowArgs} args - Arguments to find a Round
     * @example
     * // Get one Round
     * const round = await prisma.round.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoundFindUniqueOrThrowArgs>(args: SelectSubset<T, RoundFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoundClient<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Round that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoundFindFirstArgs} args - Arguments to find a Round
     * @example
     * // Get one Round
     * const round = await prisma.round.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoundFindFirstArgs>(args?: SelectSubset<T, RoundFindFirstArgs<ExtArgs>>): Prisma__RoundClient<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Round that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoundFindFirstOrThrowArgs} args - Arguments to find a Round
     * @example
     * // Get one Round
     * const round = await prisma.round.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoundFindFirstOrThrowArgs>(args?: SelectSubset<T, RoundFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoundClient<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoundFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rounds
     * const rounds = await prisma.round.findMany()
     * 
     * // Get first 10 Rounds
     * const rounds = await prisma.round.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roundWithIdOnly = await prisma.round.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoundFindManyArgs>(args?: SelectSubset<T, RoundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Round.
     * @param {RoundCreateArgs} args - Arguments to create a Round.
     * @example
     * // Create one Round
     * const Round = await prisma.round.create({
     *   data: {
     *     // ... data to create a Round
     *   }
     * })
     * 
     */
    create<T extends RoundCreateArgs>(args: SelectSubset<T, RoundCreateArgs<ExtArgs>>): Prisma__RoundClient<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rounds.
     * @param {RoundCreateManyArgs} args - Arguments to create many Rounds.
     * @example
     * // Create many Rounds
     * const round = await prisma.round.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoundCreateManyArgs>(args?: SelectSubset<T, RoundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rounds and returns the data saved in the database.
     * @param {RoundCreateManyAndReturnArgs} args - Arguments to create many Rounds.
     * @example
     * // Create many Rounds
     * const round = await prisma.round.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rounds and only return the `id`
     * const roundWithIdOnly = await prisma.round.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoundCreateManyAndReturnArgs>(args?: SelectSubset<T, RoundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Round.
     * @param {RoundDeleteArgs} args - Arguments to delete one Round.
     * @example
     * // Delete one Round
     * const Round = await prisma.round.delete({
     *   where: {
     *     // ... filter to delete one Round
     *   }
     * })
     * 
     */
    delete<T extends RoundDeleteArgs>(args: SelectSubset<T, RoundDeleteArgs<ExtArgs>>): Prisma__RoundClient<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Round.
     * @param {RoundUpdateArgs} args - Arguments to update one Round.
     * @example
     * // Update one Round
     * const round = await prisma.round.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoundUpdateArgs>(args: SelectSubset<T, RoundUpdateArgs<ExtArgs>>): Prisma__RoundClient<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rounds.
     * @param {RoundDeleteManyArgs} args - Arguments to filter Rounds to delete.
     * @example
     * // Delete a few Rounds
     * const { count } = await prisma.round.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoundDeleteManyArgs>(args?: SelectSubset<T, RoundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rounds
     * const round = await prisma.round.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoundUpdateManyArgs>(args: SelectSubset<T, RoundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rounds and returns the data updated in the database.
     * @param {RoundUpdateManyAndReturnArgs} args - Arguments to update many Rounds.
     * @example
     * // Update many Rounds
     * const round = await prisma.round.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rounds and only return the `id`
     * const roundWithIdOnly = await prisma.round.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoundUpdateManyAndReturnArgs>(args: SelectSubset<T, RoundUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Round.
     * @param {RoundUpsertArgs} args - Arguments to update or create a Round.
     * @example
     * // Update or create a Round
     * const round = await prisma.round.upsert({
     *   create: {
     *     // ... data to create a Round
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Round we want to update
     *   }
     * })
     */
    upsert<T extends RoundUpsertArgs>(args: SelectSubset<T, RoundUpsertArgs<ExtArgs>>): Prisma__RoundClient<$Result.GetResult<Prisma.$RoundPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoundCountArgs} args - Arguments to filter Rounds to count.
     * @example
     * // Count the number of Rounds
     * const count = await prisma.round.count({
     *   where: {
     *     // ... the filter for the Rounds we want to count
     *   }
     * })
    **/
    count<T extends RoundCountArgs>(
      args?: Subset<T, RoundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Round.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoundAggregateArgs>(args: Subset<T, RoundAggregateArgs>): Prisma.PrismaPromise<GetRoundAggregateType<T>>

    /**
     * Group by Round.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoundGroupByArgs['orderBy'] }
        : { orderBy?: RoundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Round model
   */
  readonly fields: RoundFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Round.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoundClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    side<T extends SideDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SideDefaultArgs<ExtArgs>>): Prisma__SideClient<$Result.GetResult<Prisma.$SidePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    operator<T extends Round$operatorArgs<ExtArgs> = {}>(args?: Subset<T, Round$operatorArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Round model
   */
  interface RoundFieldRefs {
    readonly id: FieldRef<"Round", 'String'>
    readonly createdAt: FieldRef<"Round", 'DateTime'>
    readonly gameId: FieldRef<"Round", 'String'>
    readonly playerId: FieldRef<"Round", 'String'>
    readonly roundNumber: FieldRef<"Round", 'Int'>
    readonly sideId: FieldRef<"Round", 'String'>
    readonly operatorId: FieldRef<"Round", 'String'>
    readonly roundResult: FieldRef<"Round", 'String'>
    readonly kills: FieldRef<"Round", 'Int'>
    readonly death: FieldRef<"Round", 'Boolean'>
    readonly assists: FieldRef<"Round", 'Int'>
    readonly disconnected: FieldRef<"Round", 'Boolean'>
    readonly points: FieldRef<"Round", 'Int'>
    readonly isFinished: FieldRef<"Round", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Round findUnique
   */
  export type RoundFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * Filter, which Round to fetch.
     */
    where: RoundWhereUniqueInput
  }

  /**
   * Round findUniqueOrThrow
   */
  export type RoundFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * Filter, which Round to fetch.
     */
    where: RoundWhereUniqueInput
  }

  /**
   * Round findFirst
   */
  export type RoundFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * Filter, which Round to fetch.
     */
    where?: RoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rounds to fetch.
     */
    orderBy?: RoundOrderByWithRelationInput | RoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rounds.
     */
    cursor?: RoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rounds.
     */
    distinct?: RoundScalarFieldEnum | RoundScalarFieldEnum[]
  }

  /**
   * Round findFirstOrThrow
   */
  export type RoundFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * Filter, which Round to fetch.
     */
    where?: RoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rounds to fetch.
     */
    orderBy?: RoundOrderByWithRelationInput | RoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rounds.
     */
    cursor?: RoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rounds.
     */
    distinct?: RoundScalarFieldEnum | RoundScalarFieldEnum[]
  }

  /**
   * Round findMany
   */
  export type RoundFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * Filter, which Rounds to fetch.
     */
    where?: RoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rounds to fetch.
     */
    orderBy?: RoundOrderByWithRelationInput | RoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rounds.
     */
    cursor?: RoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rounds.
     */
    skip?: number
    distinct?: RoundScalarFieldEnum | RoundScalarFieldEnum[]
  }

  /**
   * Round create
   */
  export type RoundCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * The data needed to create a Round.
     */
    data: XOR<RoundCreateInput, RoundUncheckedCreateInput>
  }

  /**
   * Round createMany
   */
  export type RoundCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rounds.
     */
    data: RoundCreateManyInput | RoundCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Round createManyAndReturn
   */
  export type RoundCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * The data used to create many Rounds.
     */
    data: RoundCreateManyInput | RoundCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Round update
   */
  export type RoundUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * The data needed to update a Round.
     */
    data: XOR<RoundUpdateInput, RoundUncheckedUpdateInput>
    /**
     * Choose, which Round to update.
     */
    where: RoundWhereUniqueInput
  }

  /**
   * Round updateMany
   */
  export type RoundUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rounds.
     */
    data: XOR<RoundUpdateManyMutationInput, RoundUncheckedUpdateManyInput>
    /**
     * Filter which Rounds to update
     */
    where?: RoundWhereInput
    /**
     * Limit how many Rounds to update.
     */
    limit?: number
  }

  /**
   * Round updateManyAndReturn
   */
  export type RoundUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * The data used to update Rounds.
     */
    data: XOR<RoundUpdateManyMutationInput, RoundUncheckedUpdateManyInput>
    /**
     * Filter which Rounds to update
     */
    where?: RoundWhereInput
    /**
     * Limit how many Rounds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Round upsert
   */
  export type RoundUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * The filter to search for the Round to update in case it exists.
     */
    where: RoundWhereUniqueInput
    /**
     * In case the Round found by the `where` argument doesn't exist, create a new Round with this data.
     */
    create: XOR<RoundCreateInput, RoundUncheckedCreateInput>
    /**
     * In case the Round was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoundUpdateInput, RoundUncheckedUpdateInput>
  }

  /**
   * Round delete
   */
  export type RoundDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
    /**
     * Filter which Round to delete.
     */
    where: RoundWhereUniqueInput
  }

  /**
   * Round deleteMany
   */
  export type RoundDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rounds to delete
     */
    where?: RoundWhereInput
    /**
     * Limit how many Rounds to delete.
     */
    limit?: number
  }

  /**
   * Round.operator
   */
  export type Round$operatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Operator
     */
    omit?: OperatorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    where?: OperatorWhereInput
  }

  /**
   * Round without action
   */
  export type RoundDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Round
     */
    select?: RoundSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Round
     */
    omit?: RoundOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoundInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PlatformScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PlatformScalarFieldEnum = (typeof PlatformScalarFieldEnum)[keyof typeof PlatformScalarFieldEnum]


  export const SideScalarFieldEnum: {
    id: 'id',
    name: 'name',
    label: 'label'
  };

  export type SideScalarFieldEnum = (typeof SideScalarFieldEnum)[keyof typeof SideScalarFieldEnum]


  export const GameModeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type GameModeScalarFieldEnum = (typeof GameModeScalarFieldEnum)[keyof typeof GameModeScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    email: 'email',
    username: 'username',
    password: 'password'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const PlayerAccountScalarFieldEnum: {
    id: 'id',
    playerId: 'playerId',
    platformId: 'platformId',
    gamertag: 'gamertag',
    externalId: 'externalId'
  };

  export type PlayerAccountScalarFieldEnum = (typeof PlayerAccountScalarFieldEnum)[keyof typeof PlayerAccountScalarFieldEnum]


  export const MapScalarFieldEnum: {
    id: 'id',
    name: 'name',
    nameFr: 'nameFr',
    url: 'url'
  };

  export type MapScalarFieldEnum = (typeof MapScalarFieldEnum)[keyof typeof MapScalarFieldEnum]


  export const OperatorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    sideId: 'sideId',
    image: 'image',
    icon: 'icon'
  };

  export type OperatorScalarFieldEnum = (typeof OperatorScalarFieldEnum)[keyof typeof OperatorScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    date: 'date',
    playerId: 'playerId',
    mapId: 'mapId',
    modeId: 'modeId',
    platformId: 'platformId',
    accountId: 'accountId',
    playerScore: 'playerScore',
    opponentScore: 'opponentScore',
    status: 'status',
    overtime: 'overtime',
    roundNumber: 'roundNumber',
    isFinished: 'isFinished'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const RoundScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    gameId: 'gameId',
    playerId: 'playerId',
    roundNumber: 'roundNumber',
    sideId: 'sideId',
    operatorId: 'operatorId',
    roundResult: 'roundResult',
    kills: 'kills',
    death: 'death',
    assists: 'assists',
    disconnected: 'disconnected',
    points: 'points',
    isFinished: 'isFinished'
  };

  export type RoundScalarFieldEnum = (typeof RoundScalarFieldEnum)[keyof typeof RoundScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PlatformWhereInput = {
    AND?: PlatformWhereInput | PlatformWhereInput[]
    OR?: PlatformWhereInput[]
    NOT?: PlatformWhereInput | PlatformWhereInput[]
    id?: StringFilter<"Platform"> | string
    name?: StringFilter<"Platform"> | string
    games?: GameListRelationFilter
    accounts?: PlayerAccountListRelationFilter
  }

  export type PlatformOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    games?: GameOrderByRelationAggregateInput
    accounts?: PlayerAccountOrderByRelationAggregateInput
  }

  export type PlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: PlatformWhereInput | PlatformWhereInput[]
    OR?: PlatformWhereInput[]
    NOT?: PlatformWhereInput | PlatformWhereInput[]
    games?: GameListRelationFilter
    accounts?: PlayerAccountListRelationFilter
  }, "id" | "name">

  export type PlatformOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: PlatformCountOrderByAggregateInput
    _max?: PlatformMaxOrderByAggregateInput
    _min?: PlatformMinOrderByAggregateInput
  }

  export type PlatformScalarWhereWithAggregatesInput = {
    AND?: PlatformScalarWhereWithAggregatesInput | PlatformScalarWhereWithAggregatesInput[]
    OR?: PlatformScalarWhereWithAggregatesInput[]
    NOT?: PlatformScalarWhereWithAggregatesInput | PlatformScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Platform"> | string
    name?: StringWithAggregatesFilter<"Platform"> | string
  }

  export type SideWhereInput = {
    AND?: SideWhereInput | SideWhereInput[]
    OR?: SideWhereInput[]
    NOT?: SideWhereInput | SideWhereInput[]
    id?: StringFilter<"Side"> | string
    name?: StringFilter<"Side"> | string
    label?: StringFilter<"Side"> | string
    operators?: OperatorListRelationFilter
    roundsSide?: RoundListRelationFilter
  }

  export type SideOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    operators?: OperatorOrderByRelationAggregateInput
    roundsSide?: RoundOrderByRelationAggregateInput
  }

  export type SideWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: SideWhereInput | SideWhereInput[]
    OR?: SideWhereInput[]
    NOT?: SideWhereInput | SideWhereInput[]
    label?: StringFilter<"Side"> | string
    operators?: OperatorListRelationFilter
    roundsSide?: RoundListRelationFilter
  }, "id" | "name">

  export type SideOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
    _count?: SideCountOrderByAggregateInput
    _max?: SideMaxOrderByAggregateInput
    _min?: SideMinOrderByAggregateInput
  }

  export type SideScalarWhereWithAggregatesInput = {
    AND?: SideScalarWhereWithAggregatesInput | SideScalarWhereWithAggregatesInput[]
    OR?: SideScalarWhereWithAggregatesInput[]
    NOT?: SideScalarWhereWithAggregatesInput | SideScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Side"> | string
    name?: StringWithAggregatesFilter<"Side"> | string
    label?: StringWithAggregatesFilter<"Side"> | string
  }

  export type GameModeWhereInput = {
    AND?: GameModeWhereInput | GameModeWhereInput[]
    OR?: GameModeWhereInput[]
    NOT?: GameModeWhereInput | GameModeWhereInput[]
    id?: StringFilter<"GameMode"> | string
    name?: StringFilter<"GameMode"> | string
    games?: GameListRelationFilter
  }

  export type GameModeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    games?: GameOrderByRelationAggregateInput
  }

  export type GameModeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: GameModeWhereInput | GameModeWhereInput[]
    OR?: GameModeWhereInput[]
    NOT?: GameModeWhereInput | GameModeWhereInput[]
    games?: GameListRelationFilter
  }, "id" | "name">

  export type GameModeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: GameModeCountOrderByAggregateInput
    _max?: GameModeMaxOrderByAggregateInput
    _min?: GameModeMinOrderByAggregateInput
  }

  export type GameModeScalarWhereWithAggregatesInput = {
    AND?: GameModeScalarWhereWithAggregatesInput | GameModeScalarWhereWithAggregatesInput[]
    OR?: GameModeScalarWhereWithAggregatesInput[]
    NOT?: GameModeScalarWhereWithAggregatesInput | GameModeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GameMode"> | string
    name?: StringWithAggregatesFilter<"GameMode"> | string
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: StringFilter<"Player"> | string
    createdAt?: DateTimeFilter<"Player"> | Date | string
    email?: StringFilter<"Player"> | string
    username?: StringFilter<"Player"> | string
    password?: StringFilter<"Player"> | string
    accounts?: PlayerAccountListRelationFilter
    games?: GameListRelationFilter
    rounds?: RoundListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    accounts?: PlayerAccountOrderByRelationAggregateInput
    games?: GameOrderByRelationAggregateInput
    rounds?: RoundOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    createdAt?: DateTimeFilter<"Player"> | Date | string
    username?: StringFilter<"Player"> | string
    password?: StringFilter<"Player"> | string
    accounts?: PlayerAccountListRelationFilter
    games?: GameListRelationFilter
    rounds?: RoundListRelationFilter
  }, "id" | "email">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Player"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Player"> | Date | string
    email?: StringWithAggregatesFilter<"Player"> | string
    username?: StringWithAggregatesFilter<"Player"> | string
    password?: StringWithAggregatesFilter<"Player"> | string
  }

  export type PlayerAccountWhereInput = {
    AND?: PlayerAccountWhereInput | PlayerAccountWhereInput[]
    OR?: PlayerAccountWhereInput[]
    NOT?: PlayerAccountWhereInput | PlayerAccountWhereInput[]
    id?: StringFilter<"PlayerAccount"> | string
    playerId?: StringFilter<"PlayerAccount"> | string
    platformId?: StringFilter<"PlayerAccount"> | string
    gamertag?: StringFilter<"PlayerAccount"> | string
    externalId?: StringNullableFilter<"PlayerAccount"> | string | null
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    platform?: XOR<PlatformScalarRelationFilter, PlatformWhereInput>
    games?: GameListRelationFilter
  }

  export type PlayerAccountOrderByWithRelationInput = {
    id?: SortOrder
    playerId?: SortOrder
    platformId?: SortOrder
    gamertag?: SortOrder
    externalId?: SortOrderInput | SortOrder
    player?: PlayerOrderByWithRelationInput
    platform?: PlatformOrderByWithRelationInput
    games?: GameOrderByRelationAggregateInput
  }

  export type PlayerAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    playerId_platformId?: PlayerAccountPlayerIdPlatformIdCompoundUniqueInput
    AND?: PlayerAccountWhereInput | PlayerAccountWhereInput[]
    OR?: PlayerAccountWhereInput[]
    NOT?: PlayerAccountWhereInput | PlayerAccountWhereInput[]
    playerId?: StringFilter<"PlayerAccount"> | string
    platformId?: StringFilter<"PlayerAccount"> | string
    gamertag?: StringFilter<"PlayerAccount"> | string
    externalId?: StringNullableFilter<"PlayerAccount"> | string | null
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    platform?: XOR<PlatformScalarRelationFilter, PlatformWhereInput>
    games?: GameListRelationFilter
  }, "id" | "playerId_platformId">

  export type PlayerAccountOrderByWithAggregationInput = {
    id?: SortOrder
    playerId?: SortOrder
    platformId?: SortOrder
    gamertag?: SortOrder
    externalId?: SortOrderInput | SortOrder
    _count?: PlayerAccountCountOrderByAggregateInput
    _max?: PlayerAccountMaxOrderByAggregateInput
    _min?: PlayerAccountMinOrderByAggregateInput
  }

  export type PlayerAccountScalarWhereWithAggregatesInput = {
    AND?: PlayerAccountScalarWhereWithAggregatesInput | PlayerAccountScalarWhereWithAggregatesInput[]
    OR?: PlayerAccountScalarWhereWithAggregatesInput[]
    NOT?: PlayerAccountScalarWhereWithAggregatesInput | PlayerAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlayerAccount"> | string
    playerId?: StringWithAggregatesFilter<"PlayerAccount"> | string
    platformId?: StringWithAggregatesFilter<"PlayerAccount"> | string
    gamertag?: StringWithAggregatesFilter<"PlayerAccount"> | string
    externalId?: StringNullableWithAggregatesFilter<"PlayerAccount"> | string | null
  }

  export type MapWhereInput = {
    AND?: MapWhereInput | MapWhereInput[]
    OR?: MapWhereInput[]
    NOT?: MapWhereInput | MapWhereInput[]
    id?: StringFilter<"Map"> | string
    name?: StringFilter<"Map"> | string
    nameFr?: StringFilter<"Map"> | string
    url?: StringFilter<"Map"> | string
    games?: GameListRelationFilter
  }

  export type MapOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    nameFr?: SortOrder
    url?: SortOrder
    games?: GameOrderByRelationAggregateInput
  }

  export type MapWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    nameFr?: string
    url?: string
    AND?: MapWhereInput | MapWhereInput[]
    OR?: MapWhereInput[]
    NOT?: MapWhereInput | MapWhereInput[]
    games?: GameListRelationFilter
  }, "id" | "name" | "nameFr" | "url">

  export type MapOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    nameFr?: SortOrder
    url?: SortOrder
    _count?: MapCountOrderByAggregateInput
    _max?: MapMaxOrderByAggregateInput
    _min?: MapMinOrderByAggregateInput
  }

  export type MapScalarWhereWithAggregatesInput = {
    AND?: MapScalarWhereWithAggregatesInput | MapScalarWhereWithAggregatesInput[]
    OR?: MapScalarWhereWithAggregatesInput[]
    NOT?: MapScalarWhereWithAggregatesInput | MapScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Map"> | string
    name?: StringWithAggregatesFilter<"Map"> | string
    nameFr?: StringWithAggregatesFilter<"Map"> | string
    url?: StringWithAggregatesFilter<"Map"> | string
  }

  export type OperatorWhereInput = {
    AND?: OperatorWhereInput | OperatorWhereInput[]
    OR?: OperatorWhereInput[]
    NOT?: OperatorWhereInput | OperatorWhereInput[]
    id?: StringFilter<"Operator"> | string
    name?: StringFilter<"Operator"> | string
    sideId?: StringFilter<"Operator"> | string
    image?: StringNullableFilter<"Operator"> | string | null
    icon?: StringFilter<"Operator"> | string
    side?: XOR<SideScalarRelationFilter, SideWhereInput>
    rounds?: RoundListRelationFilter
  }

  export type OperatorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    sideId?: SortOrder
    image?: SortOrderInput | SortOrder
    icon?: SortOrder
    side?: SideOrderByWithRelationInput
    rounds?: RoundOrderByRelationAggregateInput
  }

  export type OperatorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: OperatorWhereInput | OperatorWhereInput[]
    OR?: OperatorWhereInput[]
    NOT?: OperatorWhereInput | OperatorWhereInput[]
    sideId?: StringFilter<"Operator"> | string
    image?: StringNullableFilter<"Operator"> | string | null
    icon?: StringFilter<"Operator"> | string
    side?: XOR<SideScalarRelationFilter, SideWhereInput>
    rounds?: RoundListRelationFilter
  }, "id" | "name">

  export type OperatorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    sideId?: SortOrder
    image?: SortOrderInput | SortOrder
    icon?: SortOrder
    _count?: OperatorCountOrderByAggregateInput
    _max?: OperatorMaxOrderByAggregateInput
    _min?: OperatorMinOrderByAggregateInput
  }

  export type OperatorScalarWhereWithAggregatesInput = {
    AND?: OperatorScalarWhereWithAggregatesInput | OperatorScalarWhereWithAggregatesInput[]
    OR?: OperatorScalarWhereWithAggregatesInput[]
    NOT?: OperatorScalarWhereWithAggregatesInput | OperatorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Operator"> | string
    name?: StringWithAggregatesFilter<"Operator"> | string
    sideId?: StringWithAggregatesFilter<"Operator"> | string
    image?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    icon?: StringWithAggregatesFilter<"Operator"> | string
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: StringFilter<"Game"> | string
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    date?: DateTimeNullableFilter<"Game"> | Date | string | null
    playerId?: StringNullableFilter<"Game"> | string | null
    mapId?: StringNullableFilter<"Game"> | string | null
    modeId?: StringNullableFilter<"Game"> | string | null
    platformId?: StringNullableFilter<"Game"> | string | null
    accountId?: StringNullableFilter<"Game"> | string | null
    playerScore?: IntNullableFilter<"Game"> | number | null
    opponentScore?: IntNullableFilter<"Game"> | number | null
    status?: StringNullableFilter<"Game"> | string | null
    overtime?: BoolNullableFilter<"Game"> | boolean | null
    roundNumber?: IntNullableFilter<"Game"> | number | null
    isFinished?: BoolFilter<"Game"> | boolean
    player?: XOR<PlayerNullableScalarRelationFilter, PlayerWhereInput> | null
    map?: XOR<MapNullableScalarRelationFilter, MapWhereInput> | null
    mode?: XOR<GameModeNullableScalarRelationFilter, GameModeWhereInput> | null
    platform?: XOR<PlatformNullableScalarRelationFilter, PlatformWhereInput> | null
    account?: XOR<PlayerAccountNullableScalarRelationFilter, PlayerAccountWhereInput> | null
    rounds?: RoundListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    date?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    mapId?: SortOrderInput | SortOrder
    modeId?: SortOrderInput | SortOrder
    platformId?: SortOrderInput | SortOrder
    accountId?: SortOrderInput | SortOrder
    playerScore?: SortOrderInput | SortOrder
    opponentScore?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    overtime?: SortOrderInput | SortOrder
    roundNumber?: SortOrderInput | SortOrder
    isFinished?: SortOrder
    player?: PlayerOrderByWithRelationInput
    map?: MapOrderByWithRelationInput
    mode?: GameModeOrderByWithRelationInput
    platform?: PlatformOrderByWithRelationInput
    account?: PlayerAccountOrderByWithRelationInput
    rounds?: RoundOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    date?: DateTimeNullableFilter<"Game"> | Date | string | null
    playerId?: StringNullableFilter<"Game"> | string | null
    mapId?: StringNullableFilter<"Game"> | string | null
    modeId?: StringNullableFilter<"Game"> | string | null
    platformId?: StringNullableFilter<"Game"> | string | null
    accountId?: StringNullableFilter<"Game"> | string | null
    playerScore?: IntNullableFilter<"Game"> | number | null
    opponentScore?: IntNullableFilter<"Game"> | number | null
    status?: StringNullableFilter<"Game"> | string | null
    overtime?: BoolNullableFilter<"Game"> | boolean | null
    roundNumber?: IntNullableFilter<"Game"> | number | null
    isFinished?: BoolFilter<"Game"> | boolean
    player?: XOR<PlayerNullableScalarRelationFilter, PlayerWhereInput> | null
    map?: XOR<MapNullableScalarRelationFilter, MapWhereInput> | null
    mode?: XOR<GameModeNullableScalarRelationFilter, GameModeWhereInput> | null
    platform?: XOR<PlatformNullableScalarRelationFilter, PlatformWhereInput> | null
    account?: XOR<PlayerAccountNullableScalarRelationFilter, PlayerAccountWhereInput> | null
    rounds?: RoundListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    date?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    mapId?: SortOrderInput | SortOrder
    modeId?: SortOrderInput | SortOrder
    platformId?: SortOrderInput | SortOrder
    accountId?: SortOrderInput | SortOrder
    playerScore?: SortOrderInput | SortOrder
    opponentScore?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    overtime?: SortOrderInput | SortOrder
    roundNumber?: SortOrderInput | SortOrder
    isFinished?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Game"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    date?: DateTimeNullableWithAggregatesFilter<"Game"> | Date | string | null
    playerId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    mapId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    modeId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    platformId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    accountId?: StringNullableWithAggregatesFilter<"Game"> | string | null
    playerScore?: IntNullableWithAggregatesFilter<"Game"> | number | null
    opponentScore?: IntNullableWithAggregatesFilter<"Game"> | number | null
    status?: StringNullableWithAggregatesFilter<"Game"> | string | null
    overtime?: BoolNullableWithAggregatesFilter<"Game"> | boolean | null
    roundNumber?: IntNullableWithAggregatesFilter<"Game"> | number | null
    isFinished?: BoolWithAggregatesFilter<"Game"> | boolean
  }

  export type RoundWhereInput = {
    AND?: RoundWhereInput | RoundWhereInput[]
    OR?: RoundWhereInput[]
    NOT?: RoundWhereInput | RoundWhereInput[]
    id?: StringFilter<"Round"> | string
    createdAt?: DateTimeFilter<"Round"> | Date | string
    gameId?: StringFilter<"Round"> | string
    playerId?: StringFilter<"Round"> | string
    roundNumber?: IntFilter<"Round"> | number
    sideId?: StringFilter<"Round"> | string
    operatorId?: StringNullableFilter<"Round"> | string | null
    roundResult?: StringNullableFilter<"Round"> | string | null
    kills?: IntFilter<"Round"> | number
    death?: BoolFilter<"Round"> | boolean
    assists?: IntFilter<"Round"> | number
    disconnected?: BoolFilter<"Round"> | boolean
    points?: IntFilter<"Round"> | number
    isFinished?: BoolFilter<"Round"> | boolean
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    side?: XOR<SideScalarRelationFilter, SideWhereInput>
    operator?: XOR<OperatorNullableScalarRelationFilter, OperatorWhereInput> | null
  }

  export type RoundOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    roundNumber?: SortOrder
    sideId?: SortOrder
    operatorId?: SortOrderInput | SortOrder
    roundResult?: SortOrderInput | SortOrder
    kills?: SortOrder
    death?: SortOrder
    assists?: SortOrder
    disconnected?: SortOrder
    points?: SortOrder
    isFinished?: SortOrder
    game?: GameOrderByWithRelationInput
    player?: PlayerOrderByWithRelationInput
    side?: SideOrderByWithRelationInput
    operator?: OperatorOrderByWithRelationInput
  }

  export type RoundWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    gameId_roundNumber?: RoundGameIdRoundNumberCompoundUniqueInput
    AND?: RoundWhereInput | RoundWhereInput[]
    OR?: RoundWhereInput[]
    NOT?: RoundWhereInput | RoundWhereInput[]
    createdAt?: DateTimeFilter<"Round"> | Date | string
    gameId?: StringFilter<"Round"> | string
    playerId?: StringFilter<"Round"> | string
    roundNumber?: IntFilter<"Round"> | number
    sideId?: StringFilter<"Round"> | string
    operatorId?: StringNullableFilter<"Round"> | string | null
    roundResult?: StringNullableFilter<"Round"> | string | null
    kills?: IntFilter<"Round"> | number
    death?: BoolFilter<"Round"> | boolean
    assists?: IntFilter<"Round"> | number
    disconnected?: BoolFilter<"Round"> | boolean
    points?: IntFilter<"Round"> | number
    isFinished?: BoolFilter<"Round"> | boolean
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    player?: XOR<PlayerScalarRelationFilter, PlayerWhereInput>
    side?: XOR<SideScalarRelationFilter, SideWhereInput>
    operator?: XOR<OperatorNullableScalarRelationFilter, OperatorWhereInput> | null
  }, "id" | "gameId_roundNumber">

  export type RoundOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    roundNumber?: SortOrder
    sideId?: SortOrder
    operatorId?: SortOrderInput | SortOrder
    roundResult?: SortOrderInput | SortOrder
    kills?: SortOrder
    death?: SortOrder
    assists?: SortOrder
    disconnected?: SortOrder
    points?: SortOrder
    isFinished?: SortOrder
    _count?: RoundCountOrderByAggregateInput
    _avg?: RoundAvgOrderByAggregateInput
    _max?: RoundMaxOrderByAggregateInput
    _min?: RoundMinOrderByAggregateInput
    _sum?: RoundSumOrderByAggregateInput
  }

  export type RoundScalarWhereWithAggregatesInput = {
    AND?: RoundScalarWhereWithAggregatesInput | RoundScalarWhereWithAggregatesInput[]
    OR?: RoundScalarWhereWithAggregatesInput[]
    NOT?: RoundScalarWhereWithAggregatesInput | RoundScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Round"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Round"> | Date | string
    gameId?: StringWithAggregatesFilter<"Round"> | string
    playerId?: StringWithAggregatesFilter<"Round"> | string
    roundNumber?: IntWithAggregatesFilter<"Round"> | number
    sideId?: StringWithAggregatesFilter<"Round"> | string
    operatorId?: StringNullableWithAggregatesFilter<"Round"> | string | null
    roundResult?: StringNullableWithAggregatesFilter<"Round"> | string | null
    kills?: IntWithAggregatesFilter<"Round"> | number
    death?: BoolWithAggregatesFilter<"Round"> | boolean
    assists?: IntWithAggregatesFilter<"Round"> | number
    disconnected?: BoolWithAggregatesFilter<"Round"> | boolean
    points?: IntWithAggregatesFilter<"Round"> | number
    isFinished?: BoolWithAggregatesFilter<"Round"> | boolean
  }

  export type PlatformCreateInput = {
    id?: string
    name: string
    games?: GameCreateNestedManyWithoutPlatformInput
    accounts?: PlayerAccountCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateInput = {
    id?: string
    name: string
    games?: GameUncheckedCreateNestedManyWithoutPlatformInput
    accounts?: PlayerAccountUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    games?: GameUpdateManyWithoutPlatformNestedInput
    accounts?: PlayerAccountUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    games?: GameUncheckedUpdateManyWithoutPlatformNestedInput
    accounts?: PlayerAccountUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformCreateManyInput = {
    id?: string
    name: string
  }

  export type PlatformUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlatformUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SideCreateInput = {
    id?: string
    name: string
    label: string
    operators?: OperatorCreateNestedManyWithoutSideInput
    roundsSide?: RoundCreateNestedManyWithoutSideInput
  }

  export type SideUncheckedCreateInput = {
    id?: string
    name: string
    label: string
    operators?: OperatorUncheckedCreateNestedManyWithoutSideInput
    roundsSide?: RoundUncheckedCreateNestedManyWithoutSideInput
  }

  export type SideUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    operators?: OperatorUpdateManyWithoutSideNestedInput
    roundsSide?: RoundUpdateManyWithoutSideNestedInput
  }

  export type SideUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    operators?: OperatorUncheckedUpdateManyWithoutSideNestedInput
    roundsSide?: RoundUncheckedUpdateManyWithoutSideNestedInput
  }

  export type SideCreateManyInput = {
    id?: string
    name: string
    label: string
  }

  export type SideUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type SideUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type GameModeCreateInput = {
    id?: string
    name: string
    games?: GameCreateNestedManyWithoutModeInput
  }

  export type GameModeUncheckedCreateInput = {
    id?: string
    name: string
    games?: GameUncheckedCreateNestedManyWithoutModeInput
  }

  export type GameModeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    games?: GameUpdateManyWithoutModeNestedInput
  }

  export type GameModeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    games?: GameUncheckedUpdateManyWithoutModeNestedInput
  }

  export type GameModeCreateManyInput = {
    id?: string
    name: string
  }

  export type GameModeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GameModeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerCreateInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
    accounts?: PlayerAccountCreateNestedManyWithoutPlayerInput
    games?: GameCreateNestedManyWithoutPlayerInput
    rounds?: RoundCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
    accounts?: PlayerAccountUncheckedCreateNestedManyWithoutPlayerInput
    games?: GameUncheckedCreateNestedManyWithoutPlayerInput
    rounds?: RoundUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accounts?: PlayerAccountUpdateManyWithoutPlayerNestedInput
    games?: GameUpdateManyWithoutPlayerNestedInput
    rounds?: RoundUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accounts?: PlayerAccountUncheckedUpdateManyWithoutPlayerNestedInput
    games?: GameUncheckedUpdateManyWithoutPlayerNestedInput
    rounds?: RoundUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
  }

  export type PlayerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerAccountCreateInput = {
    id?: string
    gamertag: string
    externalId?: string | null
    player: PlayerCreateNestedOneWithoutAccountsInput
    platform: PlatformCreateNestedOneWithoutAccountsInput
    games?: GameCreateNestedManyWithoutAccountInput
  }

  export type PlayerAccountUncheckedCreateInput = {
    id?: string
    playerId: string
    platformId: string
    gamertag: string
    externalId?: string | null
    games?: GameUncheckedCreateNestedManyWithoutAccountInput
  }

  export type PlayerAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    player?: PlayerUpdateOneRequiredWithoutAccountsNestedInput
    platform?: PlatformUpdateOneRequiredWithoutAccountsNestedInput
    games?: GameUpdateManyWithoutAccountNestedInput
  }

  export type PlayerAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    games?: GameUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type PlayerAccountCreateManyInput = {
    id?: string
    playerId: string
    platformId: string
    gamertag: string
    externalId?: string | null
  }

  export type PlayerAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlayerAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MapCreateInput = {
    id?: string
    name: string
    nameFr: string
    url: string
    games?: GameCreateNestedManyWithoutMapInput
  }

  export type MapUncheckedCreateInput = {
    id?: string
    name: string
    nameFr: string
    url: string
    games?: GameUncheckedCreateNestedManyWithoutMapInput
  }

  export type MapUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameFr?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    games?: GameUpdateManyWithoutMapNestedInput
  }

  export type MapUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameFr?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    games?: GameUncheckedUpdateManyWithoutMapNestedInput
  }

  export type MapCreateManyInput = {
    id?: string
    name: string
    nameFr: string
    url: string
  }

  export type MapUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameFr?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type MapUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameFr?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type OperatorCreateInput = {
    id?: string
    name: string
    image?: string | null
    icon: string
    side: SideCreateNestedOneWithoutOperatorsInput
    rounds?: RoundCreateNestedManyWithoutOperatorInput
  }

  export type OperatorUncheckedCreateInput = {
    id?: string
    name: string
    sideId: string
    image?: string | null
    icon: string
    rounds?: RoundUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    side?: SideUpdateOneRequiredWithoutOperatorsNestedInput
    rounds?: RoundUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sideId?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    rounds?: RoundUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorCreateManyInput = {
    id?: string
    name: string
    sideId: string
    image?: string | null
    icon: string
  }

  export type OperatorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type OperatorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sideId?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type GameCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    player?: PlayerCreateNestedOneWithoutGamesInput
    map?: MapCreateNestedOneWithoutGamesInput
    mode?: GameModeCreateNestedOneWithoutGamesInput
    platform?: PlatformCreateNestedOneWithoutGamesInput
    account?: PlayerAccountCreateNestedOneWithoutGamesInput
    rounds?: RoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    modeId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    rounds?: RoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    player?: PlayerUpdateOneWithoutGamesNestedInput
    map?: MapUpdateOneWithoutGamesNestedInput
    mode?: GameModeUpdateOneWithoutGamesNestedInput
    platform?: PlatformUpdateOneWithoutGamesNestedInput
    account?: PlayerAccountUpdateOneWithoutGamesNestedInput
    rounds?: RoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    rounds?: RoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    modeId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundCreateInput = {
    id?: string
    createdAt?: Date | string
    roundNumber: number
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
    game: GameCreateNestedOneWithoutRoundsInput
    player: PlayerCreateNestedOneWithoutRoundsInput
    side: SideCreateNestedOneWithoutRoundsSideInput
    operator?: OperatorCreateNestedOneWithoutRoundsInput
  }

  export type RoundUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    gameId: string
    playerId: string
    roundNumber: number
    sideId: string
    operatorId?: string | null
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type RoundUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUpdateOneRequiredWithoutRoundsNestedInput
    player?: PlayerUpdateOneRequiredWithoutRoundsNestedInput
    side?: SideUpdateOneRequiredWithoutRoundsSideNestedInput
    operator?: OperatorUpdateOneWithoutRoundsNestedInput
  }

  export type RoundUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    sideId?: StringFieldUpdateOperationsInput | string
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundCreateManyInput = {
    id?: string
    createdAt?: Date | string
    gameId: string
    playerId: string
    roundNumber: number
    sideId: string
    operatorId?: string | null
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type RoundUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    sideId?: StringFieldUpdateOperationsInput | string
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type PlayerAccountListRelationFilter = {
    every?: PlayerAccountWhereInput
    some?: PlayerAccountWhereInput
    none?: PlayerAccountWhereInput
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlatformCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlatformMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type OperatorListRelationFilter = {
    every?: OperatorWhereInput
    some?: OperatorWhereInput
    none?: OperatorWhereInput
  }

  export type RoundListRelationFilter = {
    every?: RoundWhereInput
    some?: RoundWhereInput
    none?: RoundWhereInput
  }

  export type OperatorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoundOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SideCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
  }

  export type SideMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
  }

  export type SideMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    label?: SortOrder
  }

  export type GameModeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GameModeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GameModeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PlayerScalarRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type PlatformScalarRelationFilter = {
    is?: PlatformWhereInput
    isNot?: PlatformWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PlayerAccountPlayerIdPlatformIdCompoundUniqueInput = {
    playerId: string
    platformId: string
  }

  export type PlayerAccountCountOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    platformId?: SortOrder
    gamertag?: SortOrder
    externalId?: SortOrder
  }

  export type PlayerAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    platformId?: SortOrder
    gamertag?: SortOrder
    externalId?: SortOrder
  }

  export type PlayerAccountMinOrderByAggregateInput = {
    id?: SortOrder
    playerId?: SortOrder
    platformId?: SortOrder
    gamertag?: SortOrder
    externalId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type MapCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameFr?: SortOrder
    url?: SortOrder
  }

  export type MapMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameFr?: SortOrder
    url?: SortOrder
  }

  export type MapMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    nameFr?: SortOrder
    url?: SortOrder
  }

  export type SideScalarRelationFilter = {
    is?: SideWhereInput
    isNot?: SideWhereInput
  }

  export type OperatorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sideId?: SortOrder
    image?: SortOrder
    icon?: SortOrder
  }

  export type OperatorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sideId?: SortOrder
    image?: SortOrder
    icon?: SortOrder
  }

  export type OperatorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sideId?: SortOrder
    image?: SortOrder
    icon?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PlayerNullableScalarRelationFilter = {
    is?: PlayerWhereInput | null
    isNot?: PlayerWhereInput | null
  }

  export type MapNullableScalarRelationFilter = {
    is?: MapWhereInput | null
    isNot?: MapWhereInput | null
  }

  export type GameModeNullableScalarRelationFilter = {
    is?: GameModeWhereInput | null
    isNot?: GameModeWhereInput | null
  }

  export type PlatformNullableScalarRelationFilter = {
    is?: PlatformWhereInput | null
    isNot?: PlatformWhereInput | null
  }

  export type PlayerAccountNullableScalarRelationFilter = {
    is?: PlayerAccountWhereInput | null
    isNot?: PlayerAccountWhereInput | null
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    date?: SortOrder
    playerId?: SortOrder
    mapId?: SortOrder
    modeId?: SortOrder
    platformId?: SortOrder
    accountId?: SortOrder
    playerScore?: SortOrder
    opponentScore?: SortOrder
    status?: SortOrder
    overtime?: SortOrder
    roundNumber?: SortOrder
    isFinished?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    playerScore?: SortOrder
    opponentScore?: SortOrder
    roundNumber?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    date?: SortOrder
    playerId?: SortOrder
    mapId?: SortOrder
    modeId?: SortOrder
    platformId?: SortOrder
    accountId?: SortOrder
    playerScore?: SortOrder
    opponentScore?: SortOrder
    status?: SortOrder
    overtime?: SortOrder
    roundNumber?: SortOrder
    isFinished?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    date?: SortOrder
    playerId?: SortOrder
    mapId?: SortOrder
    modeId?: SortOrder
    platformId?: SortOrder
    accountId?: SortOrder
    playerScore?: SortOrder
    opponentScore?: SortOrder
    status?: SortOrder
    overtime?: SortOrder
    roundNumber?: SortOrder
    isFinished?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    playerScore?: SortOrder
    opponentScore?: SortOrder
    roundNumber?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type OperatorNullableScalarRelationFilter = {
    is?: OperatorWhereInput | null
    isNot?: OperatorWhereInput | null
  }

  export type RoundGameIdRoundNumberCompoundUniqueInput = {
    gameId: string
    roundNumber: number
  }

  export type RoundCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    roundNumber?: SortOrder
    sideId?: SortOrder
    operatorId?: SortOrder
    roundResult?: SortOrder
    kills?: SortOrder
    death?: SortOrder
    assists?: SortOrder
    disconnected?: SortOrder
    points?: SortOrder
    isFinished?: SortOrder
  }

  export type RoundAvgOrderByAggregateInput = {
    roundNumber?: SortOrder
    kills?: SortOrder
    assists?: SortOrder
    points?: SortOrder
  }

  export type RoundMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    roundNumber?: SortOrder
    sideId?: SortOrder
    operatorId?: SortOrder
    roundResult?: SortOrder
    kills?: SortOrder
    death?: SortOrder
    assists?: SortOrder
    disconnected?: SortOrder
    points?: SortOrder
    isFinished?: SortOrder
  }

  export type RoundMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    roundNumber?: SortOrder
    sideId?: SortOrder
    operatorId?: SortOrder
    roundResult?: SortOrder
    kills?: SortOrder
    death?: SortOrder
    assists?: SortOrder
    disconnected?: SortOrder
    points?: SortOrder
    isFinished?: SortOrder
  }

  export type RoundSumOrderByAggregateInput = {
    roundNumber?: SortOrder
    kills?: SortOrder
    assists?: SortOrder
    points?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type GameCreateNestedManyWithoutPlatformInput = {
    create?: XOR<GameCreateWithoutPlatformInput, GameUncheckedCreateWithoutPlatformInput> | GameCreateWithoutPlatformInput[] | GameUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: GameCreateOrConnectWithoutPlatformInput | GameCreateOrConnectWithoutPlatformInput[]
    createMany?: GameCreateManyPlatformInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type PlayerAccountCreateNestedManyWithoutPlatformInput = {
    create?: XOR<PlayerAccountCreateWithoutPlatformInput, PlayerAccountUncheckedCreateWithoutPlatformInput> | PlayerAccountCreateWithoutPlatformInput[] | PlayerAccountUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutPlatformInput | PlayerAccountCreateOrConnectWithoutPlatformInput[]
    createMany?: PlayerAccountCreateManyPlatformInputEnvelope
    connect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutPlatformInput = {
    create?: XOR<GameCreateWithoutPlatformInput, GameUncheckedCreateWithoutPlatformInput> | GameCreateWithoutPlatformInput[] | GameUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: GameCreateOrConnectWithoutPlatformInput | GameCreateOrConnectWithoutPlatformInput[]
    createMany?: GameCreateManyPlatformInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type PlayerAccountUncheckedCreateNestedManyWithoutPlatformInput = {
    create?: XOR<PlayerAccountCreateWithoutPlatformInput, PlayerAccountUncheckedCreateWithoutPlatformInput> | PlayerAccountCreateWithoutPlatformInput[] | PlayerAccountUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutPlatformInput | PlayerAccountCreateOrConnectWithoutPlatformInput[]
    createMany?: PlayerAccountCreateManyPlatformInputEnvelope
    connect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type GameUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<GameCreateWithoutPlatformInput, GameUncheckedCreateWithoutPlatformInput> | GameCreateWithoutPlatformInput[] | GameUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: GameCreateOrConnectWithoutPlatformInput | GameCreateOrConnectWithoutPlatformInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutPlatformInput | GameUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: GameCreateManyPlatformInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutPlatformInput | GameUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: GameUpdateManyWithWhereWithoutPlatformInput | GameUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PlayerAccountUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<PlayerAccountCreateWithoutPlatformInput, PlayerAccountUncheckedCreateWithoutPlatformInput> | PlayerAccountCreateWithoutPlatformInput[] | PlayerAccountUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutPlatformInput | PlayerAccountCreateOrConnectWithoutPlatformInput[]
    upsert?: PlayerAccountUpsertWithWhereUniqueWithoutPlatformInput | PlayerAccountUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: PlayerAccountCreateManyPlatformInputEnvelope
    set?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    disconnect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    delete?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    connect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    update?: PlayerAccountUpdateWithWhereUniqueWithoutPlatformInput | PlayerAccountUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: PlayerAccountUpdateManyWithWhereWithoutPlatformInput | PlayerAccountUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: PlayerAccountScalarWhereInput | PlayerAccountScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<GameCreateWithoutPlatformInput, GameUncheckedCreateWithoutPlatformInput> | GameCreateWithoutPlatformInput[] | GameUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: GameCreateOrConnectWithoutPlatformInput | GameCreateOrConnectWithoutPlatformInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutPlatformInput | GameUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: GameCreateManyPlatformInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutPlatformInput | GameUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: GameUpdateManyWithWhereWithoutPlatformInput | GameUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PlayerAccountUncheckedUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<PlayerAccountCreateWithoutPlatformInput, PlayerAccountUncheckedCreateWithoutPlatformInput> | PlayerAccountCreateWithoutPlatformInput[] | PlayerAccountUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutPlatformInput | PlayerAccountCreateOrConnectWithoutPlatformInput[]
    upsert?: PlayerAccountUpsertWithWhereUniqueWithoutPlatformInput | PlayerAccountUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: PlayerAccountCreateManyPlatformInputEnvelope
    set?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    disconnect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    delete?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    connect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    update?: PlayerAccountUpdateWithWhereUniqueWithoutPlatformInput | PlayerAccountUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: PlayerAccountUpdateManyWithWhereWithoutPlatformInput | PlayerAccountUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: PlayerAccountScalarWhereInput | PlayerAccountScalarWhereInput[]
  }

  export type OperatorCreateNestedManyWithoutSideInput = {
    create?: XOR<OperatorCreateWithoutSideInput, OperatorUncheckedCreateWithoutSideInput> | OperatorCreateWithoutSideInput[] | OperatorUncheckedCreateWithoutSideInput[]
    connectOrCreate?: OperatorCreateOrConnectWithoutSideInput | OperatorCreateOrConnectWithoutSideInput[]
    createMany?: OperatorCreateManySideInputEnvelope
    connect?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
  }

  export type RoundCreateNestedManyWithoutSideInput = {
    create?: XOR<RoundCreateWithoutSideInput, RoundUncheckedCreateWithoutSideInput> | RoundCreateWithoutSideInput[] | RoundUncheckedCreateWithoutSideInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutSideInput | RoundCreateOrConnectWithoutSideInput[]
    createMany?: RoundCreateManySideInputEnvelope
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
  }

  export type OperatorUncheckedCreateNestedManyWithoutSideInput = {
    create?: XOR<OperatorCreateWithoutSideInput, OperatorUncheckedCreateWithoutSideInput> | OperatorCreateWithoutSideInput[] | OperatorUncheckedCreateWithoutSideInput[]
    connectOrCreate?: OperatorCreateOrConnectWithoutSideInput | OperatorCreateOrConnectWithoutSideInput[]
    createMany?: OperatorCreateManySideInputEnvelope
    connect?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
  }

  export type RoundUncheckedCreateNestedManyWithoutSideInput = {
    create?: XOR<RoundCreateWithoutSideInput, RoundUncheckedCreateWithoutSideInput> | RoundCreateWithoutSideInput[] | RoundUncheckedCreateWithoutSideInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutSideInput | RoundCreateOrConnectWithoutSideInput[]
    createMany?: RoundCreateManySideInputEnvelope
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
  }

  export type OperatorUpdateManyWithoutSideNestedInput = {
    create?: XOR<OperatorCreateWithoutSideInput, OperatorUncheckedCreateWithoutSideInput> | OperatorCreateWithoutSideInput[] | OperatorUncheckedCreateWithoutSideInput[]
    connectOrCreate?: OperatorCreateOrConnectWithoutSideInput | OperatorCreateOrConnectWithoutSideInput[]
    upsert?: OperatorUpsertWithWhereUniqueWithoutSideInput | OperatorUpsertWithWhereUniqueWithoutSideInput[]
    createMany?: OperatorCreateManySideInputEnvelope
    set?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
    disconnect?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
    delete?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
    connect?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
    update?: OperatorUpdateWithWhereUniqueWithoutSideInput | OperatorUpdateWithWhereUniqueWithoutSideInput[]
    updateMany?: OperatorUpdateManyWithWhereWithoutSideInput | OperatorUpdateManyWithWhereWithoutSideInput[]
    deleteMany?: OperatorScalarWhereInput | OperatorScalarWhereInput[]
  }

  export type RoundUpdateManyWithoutSideNestedInput = {
    create?: XOR<RoundCreateWithoutSideInput, RoundUncheckedCreateWithoutSideInput> | RoundCreateWithoutSideInput[] | RoundUncheckedCreateWithoutSideInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutSideInput | RoundCreateOrConnectWithoutSideInput[]
    upsert?: RoundUpsertWithWhereUniqueWithoutSideInput | RoundUpsertWithWhereUniqueWithoutSideInput[]
    createMany?: RoundCreateManySideInputEnvelope
    set?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    disconnect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    delete?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    update?: RoundUpdateWithWhereUniqueWithoutSideInput | RoundUpdateWithWhereUniqueWithoutSideInput[]
    updateMany?: RoundUpdateManyWithWhereWithoutSideInput | RoundUpdateManyWithWhereWithoutSideInput[]
    deleteMany?: RoundScalarWhereInput | RoundScalarWhereInput[]
  }

  export type OperatorUncheckedUpdateManyWithoutSideNestedInput = {
    create?: XOR<OperatorCreateWithoutSideInput, OperatorUncheckedCreateWithoutSideInput> | OperatorCreateWithoutSideInput[] | OperatorUncheckedCreateWithoutSideInput[]
    connectOrCreate?: OperatorCreateOrConnectWithoutSideInput | OperatorCreateOrConnectWithoutSideInput[]
    upsert?: OperatorUpsertWithWhereUniqueWithoutSideInput | OperatorUpsertWithWhereUniqueWithoutSideInput[]
    createMany?: OperatorCreateManySideInputEnvelope
    set?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
    disconnect?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
    delete?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
    connect?: OperatorWhereUniqueInput | OperatorWhereUniqueInput[]
    update?: OperatorUpdateWithWhereUniqueWithoutSideInput | OperatorUpdateWithWhereUniqueWithoutSideInput[]
    updateMany?: OperatorUpdateManyWithWhereWithoutSideInput | OperatorUpdateManyWithWhereWithoutSideInput[]
    deleteMany?: OperatorScalarWhereInput | OperatorScalarWhereInput[]
  }

  export type RoundUncheckedUpdateManyWithoutSideNestedInput = {
    create?: XOR<RoundCreateWithoutSideInput, RoundUncheckedCreateWithoutSideInput> | RoundCreateWithoutSideInput[] | RoundUncheckedCreateWithoutSideInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutSideInput | RoundCreateOrConnectWithoutSideInput[]
    upsert?: RoundUpsertWithWhereUniqueWithoutSideInput | RoundUpsertWithWhereUniqueWithoutSideInput[]
    createMany?: RoundCreateManySideInputEnvelope
    set?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    disconnect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    delete?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    update?: RoundUpdateWithWhereUniqueWithoutSideInput | RoundUpdateWithWhereUniqueWithoutSideInput[]
    updateMany?: RoundUpdateManyWithWhereWithoutSideInput | RoundUpdateManyWithWhereWithoutSideInput[]
    deleteMany?: RoundScalarWhereInput | RoundScalarWhereInput[]
  }

  export type GameCreateNestedManyWithoutModeInput = {
    create?: XOR<GameCreateWithoutModeInput, GameUncheckedCreateWithoutModeInput> | GameCreateWithoutModeInput[] | GameUncheckedCreateWithoutModeInput[]
    connectOrCreate?: GameCreateOrConnectWithoutModeInput | GameCreateOrConnectWithoutModeInput[]
    createMany?: GameCreateManyModeInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutModeInput = {
    create?: XOR<GameCreateWithoutModeInput, GameUncheckedCreateWithoutModeInput> | GameCreateWithoutModeInput[] | GameUncheckedCreateWithoutModeInput[]
    connectOrCreate?: GameCreateOrConnectWithoutModeInput | GameCreateOrConnectWithoutModeInput[]
    createMany?: GameCreateManyModeInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUpdateManyWithoutModeNestedInput = {
    create?: XOR<GameCreateWithoutModeInput, GameUncheckedCreateWithoutModeInput> | GameCreateWithoutModeInput[] | GameUncheckedCreateWithoutModeInput[]
    connectOrCreate?: GameCreateOrConnectWithoutModeInput | GameCreateOrConnectWithoutModeInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutModeInput | GameUpsertWithWhereUniqueWithoutModeInput[]
    createMany?: GameCreateManyModeInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutModeInput | GameUpdateWithWhereUniqueWithoutModeInput[]
    updateMany?: GameUpdateManyWithWhereWithoutModeInput | GameUpdateManyWithWhereWithoutModeInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutModeNestedInput = {
    create?: XOR<GameCreateWithoutModeInput, GameUncheckedCreateWithoutModeInput> | GameCreateWithoutModeInput[] | GameUncheckedCreateWithoutModeInput[]
    connectOrCreate?: GameCreateOrConnectWithoutModeInput | GameCreateOrConnectWithoutModeInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutModeInput | GameUpsertWithWhereUniqueWithoutModeInput[]
    createMany?: GameCreateManyModeInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutModeInput | GameUpdateWithWhereUniqueWithoutModeInput[]
    updateMany?: GameUpdateManyWithWhereWithoutModeInput | GameUpdateManyWithWhereWithoutModeInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PlayerAccountCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerAccountCreateWithoutPlayerInput, PlayerAccountUncheckedCreateWithoutPlayerInput> | PlayerAccountCreateWithoutPlayerInput[] | PlayerAccountUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutPlayerInput | PlayerAccountCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerAccountCreateManyPlayerInputEnvelope
    connect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
  }

  export type GameCreateNestedManyWithoutPlayerInput = {
    create?: XOR<GameCreateWithoutPlayerInput, GameUncheckedCreateWithoutPlayerInput> | GameCreateWithoutPlayerInput[] | GameUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: GameCreateOrConnectWithoutPlayerInput | GameCreateOrConnectWithoutPlayerInput[]
    createMany?: GameCreateManyPlayerInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type RoundCreateNestedManyWithoutPlayerInput = {
    create?: XOR<RoundCreateWithoutPlayerInput, RoundUncheckedCreateWithoutPlayerInput> | RoundCreateWithoutPlayerInput[] | RoundUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutPlayerInput | RoundCreateOrConnectWithoutPlayerInput[]
    createMany?: RoundCreateManyPlayerInputEnvelope
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
  }

  export type PlayerAccountUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerAccountCreateWithoutPlayerInput, PlayerAccountUncheckedCreateWithoutPlayerInput> | PlayerAccountCreateWithoutPlayerInput[] | PlayerAccountUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutPlayerInput | PlayerAccountCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerAccountCreateManyPlayerInputEnvelope
    connect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<GameCreateWithoutPlayerInput, GameUncheckedCreateWithoutPlayerInput> | GameCreateWithoutPlayerInput[] | GameUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: GameCreateOrConnectWithoutPlayerInput | GameCreateOrConnectWithoutPlayerInput[]
    createMany?: GameCreateManyPlayerInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type RoundUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<RoundCreateWithoutPlayerInput, RoundUncheckedCreateWithoutPlayerInput> | RoundCreateWithoutPlayerInput[] | RoundUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutPlayerInput | RoundCreateOrConnectWithoutPlayerInput[]
    createMany?: RoundCreateManyPlayerInputEnvelope
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PlayerAccountUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerAccountCreateWithoutPlayerInput, PlayerAccountUncheckedCreateWithoutPlayerInput> | PlayerAccountCreateWithoutPlayerInput[] | PlayerAccountUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutPlayerInput | PlayerAccountCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerAccountUpsertWithWhereUniqueWithoutPlayerInput | PlayerAccountUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerAccountCreateManyPlayerInputEnvelope
    set?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    disconnect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    delete?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    connect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    update?: PlayerAccountUpdateWithWhereUniqueWithoutPlayerInput | PlayerAccountUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerAccountUpdateManyWithWhereWithoutPlayerInput | PlayerAccountUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerAccountScalarWhereInput | PlayerAccountScalarWhereInput[]
  }

  export type GameUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<GameCreateWithoutPlayerInput, GameUncheckedCreateWithoutPlayerInput> | GameCreateWithoutPlayerInput[] | GameUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: GameCreateOrConnectWithoutPlayerInput | GameCreateOrConnectWithoutPlayerInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutPlayerInput | GameUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: GameCreateManyPlayerInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutPlayerInput | GameUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: GameUpdateManyWithWhereWithoutPlayerInput | GameUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type RoundUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<RoundCreateWithoutPlayerInput, RoundUncheckedCreateWithoutPlayerInput> | RoundCreateWithoutPlayerInput[] | RoundUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutPlayerInput | RoundCreateOrConnectWithoutPlayerInput[]
    upsert?: RoundUpsertWithWhereUniqueWithoutPlayerInput | RoundUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: RoundCreateManyPlayerInputEnvelope
    set?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    disconnect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    delete?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    update?: RoundUpdateWithWhereUniqueWithoutPlayerInput | RoundUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: RoundUpdateManyWithWhereWithoutPlayerInput | RoundUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: RoundScalarWhereInput | RoundScalarWhereInput[]
  }

  export type PlayerAccountUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerAccountCreateWithoutPlayerInput, PlayerAccountUncheckedCreateWithoutPlayerInput> | PlayerAccountCreateWithoutPlayerInput[] | PlayerAccountUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutPlayerInput | PlayerAccountCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerAccountUpsertWithWhereUniqueWithoutPlayerInput | PlayerAccountUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerAccountCreateManyPlayerInputEnvelope
    set?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    disconnect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    delete?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    connect?: PlayerAccountWhereUniqueInput | PlayerAccountWhereUniqueInput[]
    update?: PlayerAccountUpdateWithWhereUniqueWithoutPlayerInput | PlayerAccountUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerAccountUpdateManyWithWhereWithoutPlayerInput | PlayerAccountUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerAccountScalarWhereInput | PlayerAccountScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<GameCreateWithoutPlayerInput, GameUncheckedCreateWithoutPlayerInput> | GameCreateWithoutPlayerInput[] | GameUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: GameCreateOrConnectWithoutPlayerInput | GameCreateOrConnectWithoutPlayerInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutPlayerInput | GameUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: GameCreateManyPlayerInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutPlayerInput | GameUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: GameUpdateManyWithWhereWithoutPlayerInput | GameUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type RoundUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<RoundCreateWithoutPlayerInput, RoundUncheckedCreateWithoutPlayerInput> | RoundCreateWithoutPlayerInput[] | RoundUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutPlayerInput | RoundCreateOrConnectWithoutPlayerInput[]
    upsert?: RoundUpsertWithWhereUniqueWithoutPlayerInput | RoundUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: RoundCreateManyPlayerInputEnvelope
    set?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    disconnect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    delete?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    update?: RoundUpdateWithWhereUniqueWithoutPlayerInput | RoundUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: RoundUpdateManyWithWhereWithoutPlayerInput | RoundUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: RoundScalarWhereInput | RoundScalarWhereInput[]
  }

  export type PlayerCreateNestedOneWithoutAccountsInput = {
    create?: XOR<PlayerCreateWithoutAccountsInput, PlayerUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutAccountsInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlatformCreateNestedOneWithoutAccountsInput = {
    create?: XOR<PlatformCreateWithoutAccountsInput, PlatformUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutAccountsInput
    connect?: PlatformWhereUniqueInput
  }

  export type GameCreateNestedManyWithoutAccountInput = {
    create?: XOR<GameCreateWithoutAccountInput, GameUncheckedCreateWithoutAccountInput> | GameCreateWithoutAccountInput[] | GameUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: GameCreateOrConnectWithoutAccountInput | GameCreateOrConnectWithoutAccountInput[]
    createMany?: GameCreateManyAccountInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<GameCreateWithoutAccountInput, GameUncheckedCreateWithoutAccountInput> | GameCreateWithoutAccountInput[] | GameUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: GameCreateOrConnectWithoutAccountInput | GameCreateOrConnectWithoutAccountInput[]
    createMany?: GameCreateManyAccountInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PlayerUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<PlayerCreateWithoutAccountsInput, PlayerUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutAccountsInput
    upsert?: PlayerUpsertWithoutAccountsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutAccountsInput, PlayerUpdateWithoutAccountsInput>, PlayerUncheckedUpdateWithoutAccountsInput>
  }

  export type PlatformUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<PlatformCreateWithoutAccountsInput, PlatformUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutAccountsInput
    upsert?: PlatformUpsertWithoutAccountsInput
    connect?: PlatformWhereUniqueInput
    update?: XOR<XOR<PlatformUpdateToOneWithWhereWithoutAccountsInput, PlatformUpdateWithoutAccountsInput>, PlatformUncheckedUpdateWithoutAccountsInput>
  }

  export type GameUpdateManyWithoutAccountNestedInput = {
    create?: XOR<GameCreateWithoutAccountInput, GameUncheckedCreateWithoutAccountInput> | GameCreateWithoutAccountInput[] | GameUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: GameCreateOrConnectWithoutAccountInput | GameCreateOrConnectWithoutAccountInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutAccountInput | GameUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: GameCreateManyAccountInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutAccountInput | GameUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: GameUpdateManyWithWhereWithoutAccountInput | GameUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<GameCreateWithoutAccountInput, GameUncheckedCreateWithoutAccountInput> | GameCreateWithoutAccountInput[] | GameUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: GameCreateOrConnectWithoutAccountInput | GameCreateOrConnectWithoutAccountInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutAccountInput | GameUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: GameCreateManyAccountInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutAccountInput | GameUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: GameUpdateManyWithWhereWithoutAccountInput | GameUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameCreateNestedManyWithoutMapInput = {
    create?: XOR<GameCreateWithoutMapInput, GameUncheckedCreateWithoutMapInput> | GameCreateWithoutMapInput[] | GameUncheckedCreateWithoutMapInput[]
    connectOrCreate?: GameCreateOrConnectWithoutMapInput | GameCreateOrConnectWithoutMapInput[]
    createMany?: GameCreateManyMapInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutMapInput = {
    create?: XOR<GameCreateWithoutMapInput, GameUncheckedCreateWithoutMapInput> | GameCreateWithoutMapInput[] | GameUncheckedCreateWithoutMapInput[]
    connectOrCreate?: GameCreateOrConnectWithoutMapInput | GameCreateOrConnectWithoutMapInput[]
    createMany?: GameCreateManyMapInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUpdateManyWithoutMapNestedInput = {
    create?: XOR<GameCreateWithoutMapInput, GameUncheckedCreateWithoutMapInput> | GameCreateWithoutMapInput[] | GameUncheckedCreateWithoutMapInput[]
    connectOrCreate?: GameCreateOrConnectWithoutMapInput | GameCreateOrConnectWithoutMapInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutMapInput | GameUpsertWithWhereUniqueWithoutMapInput[]
    createMany?: GameCreateManyMapInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutMapInput | GameUpdateWithWhereUniqueWithoutMapInput[]
    updateMany?: GameUpdateManyWithWhereWithoutMapInput | GameUpdateManyWithWhereWithoutMapInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutMapNestedInput = {
    create?: XOR<GameCreateWithoutMapInput, GameUncheckedCreateWithoutMapInput> | GameCreateWithoutMapInput[] | GameUncheckedCreateWithoutMapInput[]
    connectOrCreate?: GameCreateOrConnectWithoutMapInput | GameCreateOrConnectWithoutMapInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutMapInput | GameUpsertWithWhereUniqueWithoutMapInput[]
    createMany?: GameCreateManyMapInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutMapInput | GameUpdateWithWhereUniqueWithoutMapInput[]
    updateMany?: GameUpdateManyWithWhereWithoutMapInput | GameUpdateManyWithWhereWithoutMapInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type SideCreateNestedOneWithoutOperatorsInput = {
    create?: XOR<SideCreateWithoutOperatorsInput, SideUncheckedCreateWithoutOperatorsInput>
    connectOrCreate?: SideCreateOrConnectWithoutOperatorsInput
    connect?: SideWhereUniqueInput
  }

  export type RoundCreateNestedManyWithoutOperatorInput = {
    create?: XOR<RoundCreateWithoutOperatorInput, RoundUncheckedCreateWithoutOperatorInput> | RoundCreateWithoutOperatorInput[] | RoundUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutOperatorInput | RoundCreateOrConnectWithoutOperatorInput[]
    createMany?: RoundCreateManyOperatorInputEnvelope
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
  }

  export type RoundUncheckedCreateNestedManyWithoutOperatorInput = {
    create?: XOR<RoundCreateWithoutOperatorInput, RoundUncheckedCreateWithoutOperatorInput> | RoundCreateWithoutOperatorInput[] | RoundUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutOperatorInput | RoundCreateOrConnectWithoutOperatorInput[]
    createMany?: RoundCreateManyOperatorInputEnvelope
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
  }

  export type SideUpdateOneRequiredWithoutOperatorsNestedInput = {
    create?: XOR<SideCreateWithoutOperatorsInput, SideUncheckedCreateWithoutOperatorsInput>
    connectOrCreate?: SideCreateOrConnectWithoutOperatorsInput
    upsert?: SideUpsertWithoutOperatorsInput
    connect?: SideWhereUniqueInput
    update?: XOR<XOR<SideUpdateToOneWithWhereWithoutOperatorsInput, SideUpdateWithoutOperatorsInput>, SideUncheckedUpdateWithoutOperatorsInput>
  }

  export type RoundUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<RoundCreateWithoutOperatorInput, RoundUncheckedCreateWithoutOperatorInput> | RoundCreateWithoutOperatorInput[] | RoundUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutOperatorInput | RoundCreateOrConnectWithoutOperatorInput[]
    upsert?: RoundUpsertWithWhereUniqueWithoutOperatorInput | RoundUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: RoundCreateManyOperatorInputEnvelope
    set?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    disconnect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    delete?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    update?: RoundUpdateWithWhereUniqueWithoutOperatorInput | RoundUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: RoundUpdateManyWithWhereWithoutOperatorInput | RoundUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: RoundScalarWhereInput | RoundScalarWhereInput[]
  }

  export type RoundUncheckedUpdateManyWithoutOperatorNestedInput = {
    create?: XOR<RoundCreateWithoutOperatorInput, RoundUncheckedCreateWithoutOperatorInput> | RoundCreateWithoutOperatorInput[] | RoundUncheckedCreateWithoutOperatorInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutOperatorInput | RoundCreateOrConnectWithoutOperatorInput[]
    upsert?: RoundUpsertWithWhereUniqueWithoutOperatorInput | RoundUpsertWithWhereUniqueWithoutOperatorInput[]
    createMany?: RoundCreateManyOperatorInputEnvelope
    set?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    disconnect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    delete?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    update?: RoundUpdateWithWhereUniqueWithoutOperatorInput | RoundUpdateWithWhereUniqueWithoutOperatorInput[]
    updateMany?: RoundUpdateManyWithWhereWithoutOperatorInput | RoundUpdateManyWithWhereWithoutOperatorInput[]
    deleteMany?: RoundScalarWhereInput | RoundScalarWhereInput[]
  }

  export type PlayerCreateNestedOneWithoutGamesInput = {
    create?: XOR<PlayerCreateWithoutGamesInput, PlayerUncheckedCreateWithoutGamesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutGamesInput
    connect?: PlayerWhereUniqueInput
  }

  export type MapCreateNestedOneWithoutGamesInput = {
    create?: XOR<MapCreateWithoutGamesInput, MapUncheckedCreateWithoutGamesInput>
    connectOrCreate?: MapCreateOrConnectWithoutGamesInput
    connect?: MapWhereUniqueInput
  }

  export type GameModeCreateNestedOneWithoutGamesInput = {
    create?: XOR<GameModeCreateWithoutGamesInput, GameModeUncheckedCreateWithoutGamesInput>
    connectOrCreate?: GameModeCreateOrConnectWithoutGamesInput
    connect?: GameModeWhereUniqueInput
  }

  export type PlatformCreateNestedOneWithoutGamesInput = {
    create?: XOR<PlatformCreateWithoutGamesInput, PlatformUncheckedCreateWithoutGamesInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutGamesInput
    connect?: PlatformWhereUniqueInput
  }

  export type PlayerAccountCreateNestedOneWithoutGamesInput = {
    create?: XOR<PlayerAccountCreateWithoutGamesInput, PlayerAccountUncheckedCreateWithoutGamesInput>
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutGamesInput
    connect?: PlayerAccountWhereUniqueInput
  }

  export type RoundCreateNestedManyWithoutGameInput = {
    create?: XOR<RoundCreateWithoutGameInput, RoundUncheckedCreateWithoutGameInput> | RoundCreateWithoutGameInput[] | RoundUncheckedCreateWithoutGameInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutGameInput | RoundCreateOrConnectWithoutGameInput[]
    createMany?: RoundCreateManyGameInputEnvelope
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
  }

  export type RoundUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<RoundCreateWithoutGameInput, RoundUncheckedCreateWithoutGameInput> | RoundCreateWithoutGameInput[] | RoundUncheckedCreateWithoutGameInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutGameInput | RoundCreateOrConnectWithoutGameInput[]
    createMany?: RoundCreateManyGameInputEnvelope
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PlayerUpdateOneWithoutGamesNestedInput = {
    create?: XOR<PlayerCreateWithoutGamesInput, PlayerUncheckedCreateWithoutGamesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutGamesInput
    upsert?: PlayerUpsertWithoutGamesInput
    disconnect?: PlayerWhereInput | boolean
    delete?: PlayerWhereInput | boolean
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutGamesInput, PlayerUpdateWithoutGamesInput>, PlayerUncheckedUpdateWithoutGamesInput>
  }

  export type MapUpdateOneWithoutGamesNestedInput = {
    create?: XOR<MapCreateWithoutGamesInput, MapUncheckedCreateWithoutGamesInput>
    connectOrCreate?: MapCreateOrConnectWithoutGamesInput
    upsert?: MapUpsertWithoutGamesInput
    disconnect?: MapWhereInput | boolean
    delete?: MapWhereInput | boolean
    connect?: MapWhereUniqueInput
    update?: XOR<XOR<MapUpdateToOneWithWhereWithoutGamesInput, MapUpdateWithoutGamesInput>, MapUncheckedUpdateWithoutGamesInput>
  }

  export type GameModeUpdateOneWithoutGamesNestedInput = {
    create?: XOR<GameModeCreateWithoutGamesInput, GameModeUncheckedCreateWithoutGamesInput>
    connectOrCreate?: GameModeCreateOrConnectWithoutGamesInput
    upsert?: GameModeUpsertWithoutGamesInput
    disconnect?: GameModeWhereInput | boolean
    delete?: GameModeWhereInput | boolean
    connect?: GameModeWhereUniqueInput
    update?: XOR<XOR<GameModeUpdateToOneWithWhereWithoutGamesInput, GameModeUpdateWithoutGamesInput>, GameModeUncheckedUpdateWithoutGamesInput>
  }

  export type PlatformUpdateOneWithoutGamesNestedInput = {
    create?: XOR<PlatformCreateWithoutGamesInput, PlatformUncheckedCreateWithoutGamesInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutGamesInput
    upsert?: PlatformUpsertWithoutGamesInput
    disconnect?: PlatformWhereInput | boolean
    delete?: PlatformWhereInput | boolean
    connect?: PlatformWhereUniqueInput
    update?: XOR<XOR<PlatformUpdateToOneWithWhereWithoutGamesInput, PlatformUpdateWithoutGamesInput>, PlatformUncheckedUpdateWithoutGamesInput>
  }

  export type PlayerAccountUpdateOneWithoutGamesNestedInput = {
    create?: XOR<PlayerAccountCreateWithoutGamesInput, PlayerAccountUncheckedCreateWithoutGamesInput>
    connectOrCreate?: PlayerAccountCreateOrConnectWithoutGamesInput
    upsert?: PlayerAccountUpsertWithoutGamesInput
    disconnect?: PlayerAccountWhereInput | boolean
    delete?: PlayerAccountWhereInput | boolean
    connect?: PlayerAccountWhereUniqueInput
    update?: XOR<XOR<PlayerAccountUpdateToOneWithWhereWithoutGamesInput, PlayerAccountUpdateWithoutGamesInput>, PlayerAccountUncheckedUpdateWithoutGamesInput>
  }

  export type RoundUpdateManyWithoutGameNestedInput = {
    create?: XOR<RoundCreateWithoutGameInput, RoundUncheckedCreateWithoutGameInput> | RoundCreateWithoutGameInput[] | RoundUncheckedCreateWithoutGameInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutGameInput | RoundCreateOrConnectWithoutGameInput[]
    upsert?: RoundUpsertWithWhereUniqueWithoutGameInput | RoundUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: RoundCreateManyGameInputEnvelope
    set?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    disconnect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    delete?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    update?: RoundUpdateWithWhereUniqueWithoutGameInput | RoundUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: RoundUpdateManyWithWhereWithoutGameInput | RoundUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: RoundScalarWhereInput | RoundScalarWhereInput[]
  }

  export type RoundUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<RoundCreateWithoutGameInput, RoundUncheckedCreateWithoutGameInput> | RoundCreateWithoutGameInput[] | RoundUncheckedCreateWithoutGameInput[]
    connectOrCreate?: RoundCreateOrConnectWithoutGameInput | RoundCreateOrConnectWithoutGameInput[]
    upsert?: RoundUpsertWithWhereUniqueWithoutGameInput | RoundUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: RoundCreateManyGameInputEnvelope
    set?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    disconnect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    delete?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    connect?: RoundWhereUniqueInput | RoundWhereUniqueInput[]
    update?: RoundUpdateWithWhereUniqueWithoutGameInput | RoundUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: RoundUpdateManyWithWhereWithoutGameInput | RoundUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: RoundScalarWhereInput | RoundScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutRoundsInput = {
    create?: XOR<GameCreateWithoutRoundsInput, GameUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: GameCreateOrConnectWithoutRoundsInput
    connect?: GameWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutRoundsInput = {
    create?: XOR<PlayerCreateWithoutRoundsInput, PlayerUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutRoundsInput
    connect?: PlayerWhereUniqueInput
  }

  export type SideCreateNestedOneWithoutRoundsSideInput = {
    create?: XOR<SideCreateWithoutRoundsSideInput, SideUncheckedCreateWithoutRoundsSideInput>
    connectOrCreate?: SideCreateOrConnectWithoutRoundsSideInput
    connect?: SideWhereUniqueInput
  }

  export type OperatorCreateNestedOneWithoutRoundsInput = {
    create?: XOR<OperatorCreateWithoutRoundsInput, OperatorUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: OperatorCreateOrConnectWithoutRoundsInput
    connect?: OperatorWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GameUpdateOneRequiredWithoutRoundsNestedInput = {
    create?: XOR<GameCreateWithoutRoundsInput, GameUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: GameCreateOrConnectWithoutRoundsInput
    upsert?: GameUpsertWithoutRoundsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutRoundsInput, GameUpdateWithoutRoundsInput>, GameUncheckedUpdateWithoutRoundsInput>
  }

  export type PlayerUpdateOneRequiredWithoutRoundsNestedInput = {
    create?: XOR<PlayerCreateWithoutRoundsInput, PlayerUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutRoundsInput
    upsert?: PlayerUpsertWithoutRoundsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutRoundsInput, PlayerUpdateWithoutRoundsInput>, PlayerUncheckedUpdateWithoutRoundsInput>
  }

  export type SideUpdateOneRequiredWithoutRoundsSideNestedInput = {
    create?: XOR<SideCreateWithoutRoundsSideInput, SideUncheckedCreateWithoutRoundsSideInput>
    connectOrCreate?: SideCreateOrConnectWithoutRoundsSideInput
    upsert?: SideUpsertWithoutRoundsSideInput
    connect?: SideWhereUniqueInput
    update?: XOR<XOR<SideUpdateToOneWithWhereWithoutRoundsSideInput, SideUpdateWithoutRoundsSideInput>, SideUncheckedUpdateWithoutRoundsSideInput>
  }

  export type OperatorUpdateOneWithoutRoundsNestedInput = {
    create?: XOR<OperatorCreateWithoutRoundsInput, OperatorUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: OperatorCreateOrConnectWithoutRoundsInput
    upsert?: OperatorUpsertWithoutRoundsInput
    disconnect?: OperatorWhereInput | boolean
    delete?: OperatorWhereInput | boolean
    connect?: OperatorWhereUniqueInput
    update?: XOR<XOR<OperatorUpdateToOneWithWhereWithoutRoundsInput, OperatorUpdateWithoutRoundsInput>, OperatorUncheckedUpdateWithoutRoundsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type GameCreateWithoutPlatformInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    player?: PlayerCreateNestedOneWithoutGamesInput
    map?: MapCreateNestedOneWithoutGamesInput
    mode?: GameModeCreateNestedOneWithoutGamesInput
    account?: PlayerAccountCreateNestedOneWithoutGamesInput
    rounds?: RoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutPlatformInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    modeId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    rounds?: RoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutPlatformInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutPlatformInput, GameUncheckedCreateWithoutPlatformInput>
  }

  export type GameCreateManyPlatformInputEnvelope = {
    data: GameCreateManyPlatformInput | GameCreateManyPlatformInput[]
    skipDuplicates?: boolean
  }

  export type PlayerAccountCreateWithoutPlatformInput = {
    id?: string
    gamertag: string
    externalId?: string | null
    player: PlayerCreateNestedOneWithoutAccountsInput
    games?: GameCreateNestedManyWithoutAccountInput
  }

  export type PlayerAccountUncheckedCreateWithoutPlatformInput = {
    id?: string
    playerId: string
    gamertag: string
    externalId?: string | null
    games?: GameUncheckedCreateNestedManyWithoutAccountInput
  }

  export type PlayerAccountCreateOrConnectWithoutPlatformInput = {
    where: PlayerAccountWhereUniqueInput
    create: XOR<PlayerAccountCreateWithoutPlatformInput, PlayerAccountUncheckedCreateWithoutPlatformInput>
  }

  export type PlayerAccountCreateManyPlatformInputEnvelope = {
    data: PlayerAccountCreateManyPlatformInput | PlayerAccountCreateManyPlatformInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutPlatformInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutPlatformInput, GameUncheckedUpdateWithoutPlatformInput>
    create: XOR<GameCreateWithoutPlatformInput, GameUncheckedCreateWithoutPlatformInput>
  }

  export type GameUpdateWithWhereUniqueWithoutPlatformInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutPlatformInput, GameUncheckedUpdateWithoutPlatformInput>
  }

  export type GameUpdateManyWithWhereWithoutPlatformInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutPlatformInput>
  }

  export type GameScalarWhereInput = {
    AND?: GameScalarWhereInput | GameScalarWhereInput[]
    OR?: GameScalarWhereInput[]
    NOT?: GameScalarWhereInput | GameScalarWhereInput[]
    id?: StringFilter<"Game"> | string
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    date?: DateTimeNullableFilter<"Game"> | Date | string | null
    playerId?: StringNullableFilter<"Game"> | string | null
    mapId?: StringNullableFilter<"Game"> | string | null
    modeId?: StringNullableFilter<"Game"> | string | null
    platformId?: StringNullableFilter<"Game"> | string | null
    accountId?: StringNullableFilter<"Game"> | string | null
    playerScore?: IntNullableFilter<"Game"> | number | null
    opponentScore?: IntNullableFilter<"Game"> | number | null
    status?: StringNullableFilter<"Game"> | string | null
    overtime?: BoolNullableFilter<"Game"> | boolean | null
    roundNumber?: IntNullableFilter<"Game"> | number | null
    isFinished?: BoolFilter<"Game"> | boolean
  }

  export type PlayerAccountUpsertWithWhereUniqueWithoutPlatformInput = {
    where: PlayerAccountWhereUniqueInput
    update: XOR<PlayerAccountUpdateWithoutPlatformInput, PlayerAccountUncheckedUpdateWithoutPlatformInput>
    create: XOR<PlayerAccountCreateWithoutPlatformInput, PlayerAccountUncheckedCreateWithoutPlatformInput>
  }

  export type PlayerAccountUpdateWithWhereUniqueWithoutPlatformInput = {
    where: PlayerAccountWhereUniqueInput
    data: XOR<PlayerAccountUpdateWithoutPlatformInput, PlayerAccountUncheckedUpdateWithoutPlatformInput>
  }

  export type PlayerAccountUpdateManyWithWhereWithoutPlatformInput = {
    where: PlayerAccountScalarWhereInput
    data: XOR<PlayerAccountUpdateManyMutationInput, PlayerAccountUncheckedUpdateManyWithoutPlatformInput>
  }

  export type PlayerAccountScalarWhereInput = {
    AND?: PlayerAccountScalarWhereInput | PlayerAccountScalarWhereInput[]
    OR?: PlayerAccountScalarWhereInput[]
    NOT?: PlayerAccountScalarWhereInput | PlayerAccountScalarWhereInput[]
    id?: StringFilter<"PlayerAccount"> | string
    playerId?: StringFilter<"PlayerAccount"> | string
    platformId?: StringFilter<"PlayerAccount"> | string
    gamertag?: StringFilter<"PlayerAccount"> | string
    externalId?: StringNullableFilter<"PlayerAccount"> | string | null
  }

  export type OperatorCreateWithoutSideInput = {
    id?: string
    name: string
    image?: string | null
    icon: string
    rounds?: RoundCreateNestedManyWithoutOperatorInput
  }

  export type OperatorUncheckedCreateWithoutSideInput = {
    id?: string
    name: string
    image?: string | null
    icon: string
    rounds?: RoundUncheckedCreateNestedManyWithoutOperatorInput
  }

  export type OperatorCreateOrConnectWithoutSideInput = {
    where: OperatorWhereUniqueInput
    create: XOR<OperatorCreateWithoutSideInput, OperatorUncheckedCreateWithoutSideInput>
  }

  export type OperatorCreateManySideInputEnvelope = {
    data: OperatorCreateManySideInput | OperatorCreateManySideInput[]
    skipDuplicates?: boolean
  }

  export type RoundCreateWithoutSideInput = {
    id?: string
    createdAt?: Date | string
    roundNumber: number
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
    game: GameCreateNestedOneWithoutRoundsInput
    player: PlayerCreateNestedOneWithoutRoundsInput
    operator?: OperatorCreateNestedOneWithoutRoundsInput
  }

  export type RoundUncheckedCreateWithoutSideInput = {
    id?: string
    createdAt?: Date | string
    gameId: string
    playerId: string
    roundNumber: number
    operatorId?: string | null
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type RoundCreateOrConnectWithoutSideInput = {
    where: RoundWhereUniqueInput
    create: XOR<RoundCreateWithoutSideInput, RoundUncheckedCreateWithoutSideInput>
  }

  export type RoundCreateManySideInputEnvelope = {
    data: RoundCreateManySideInput | RoundCreateManySideInput[]
    skipDuplicates?: boolean
  }

  export type OperatorUpsertWithWhereUniqueWithoutSideInput = {
    where: OperatorWhereUniqueInput
    update: XOR<OperatorUpdateWithoutSideInput, OperatorUncheckedUpdateWithoutSideInput>
    create: XOR<OperatorCreateWithoutSideInput, OperatorUncheckedCreateWithoutSideInput>
  }

  export type OperatorUpdateWithWhereUniqueWithoutSideInput = {
    where: OperatorWhereUniqueInput
    data: XOR<OperatorUpdateWithoutSideInput, OperatorUncheckedUpdateWithoutSideInput>
  }

  export type OperatorUpdateManyWithWhereWithoutSideInput = {
    where: OperatorScalarWhereInput
    data: XOR<OperatorUpdateManyMutationInput, OperatorUncheckedUpdateManyWithoutSideInput>
  }

  export type OperatorScalarWhereInput = {
    AND?: OperatorScalarWhereInput | OperatorScalarWhereInput[]
    OR?: OperatorScalarWhereInput[]
    NOT?: OperatorScalarWhereInput | OperatorScalarWhereInput[]
    id?: StringFilter<"Operator"> | string
    name?: StringFilter<"Operator"> | string
    sideId?: StringFilter<"Operator"> | string
    image?: StringNullableFilter<"Operator"> | string | null
    icon?: StringFilter<"Operator"> | string
  }

  export type RoundUpsertWithWhereUniqueWithoutSideInput = {
    where: RoundWhereUniqueInput
    update: XOR<RoundUpdateWithoutSideInput, RoundUncheckedUpdateWithoutSideInput>
    create: XOR<RoundCreateWithoutSideInput, RoundUncheckedCreateWithoutSideInput>
  }

  export type RoundUpdateWithWhereUniqueWithoutSideInput = {
    where: RoundWhereUniqueInput
    data: XOR<RoundUpdateWithoutSideInput, RoundUncheckedUpdateWithoutSideInput>
  }

  export type RoundUpdateManyWithWhereWithoutSideInput = {
    where: RoundScalarWhereInput
    data: XOR<RoundUpdateManyMutationInput, RoundUncheckedUpdateManyWithoutSideInput>
  }

  export type RoundScalarWhereInput = {
    AND?: RoundScalarWhereInput | RoundScalarWhereInput[]
    OR?: RoundScalarWhereInput[]
    NOT?: RoundScalarWhereInput | RoundScalarWhereInput[]
    id?: StringFilter<"Round"> | string
    createdAt?: DateTimeFilter<"Round"> | Date | string
    gameId?: StringFilter<"Round"> | string
    playerId?: StringFilter<"Round"> | string
    roundNumber?: IntFilter<"Round"> | number
    sideId?: StringFilter<"Round"> | string
    operatorId?: StringNullableFilter<"Round"> | string | null
    roundResult?: StringNullableFilter<"Round"> | string | null
    kills?: IntFilter<"Round"> | number
    death?: BoolFilter<"Round"> | boolean
    assists?: IntFilter<"Round"> | number
    disconnected?: BoolFilter<"Round"> | boolean
    points?: IntFilter<"Round"> | number
    isFinished?: BoolFilter<"Round"> | boolean
  }

  export type GameCreateWithoutModeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    player?: PlayerCreateNestedOneWithoutGamesInput
    map?: MapCreateNestedOneWithoutGamesInput
    platform?: PlatformCreateNestedOneWithoutGamesInput
    account?: PlayerAccountCreateNestedOneWithoutGamesInput
    rounds?: RoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutModeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    rounds?: RoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutModeInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutModeInput, GameUncheckedCreateWithoutModeInput>
  }

  export type GameCreateManyModeInputEnvelope = {
    data: GameCreateManyModeInput | GameCreateManyModeInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutModeInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutModeInput, GameUncheckedUpdateWithoutModeInput>
    create: XOR<GameCreateWithoutModeInput, GameUncheckedCreateWithoutModeInput>
  }

  export type GameUpdateWithWhereUniqueWithoutModeInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutModeInput, GameUncheckedUpdateWithoutModeInput>
  }

  export type GameUpdateManyWithWhereWithoutModeInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutModeInput>
  }

  export type PlayerAccountCreateWithoutPlayerInput = {
    id?: string
    gamertag: string
    externalId?: string | null
    platform: PlatformCreateNestedOneWithoutAccountsInput
    games?: GameCreateNestedManyWithoutAccountInput
  }

  export type PlayerAccountUncheckedCreateWithoutPlayerInput = {
    id?: string
    platformId: string
    gamertag: string
    externalId?: string | null
    games?: GameUncheckedCreateNestedManyWithoutAccountInput
  }

  export type PlayerAccountCreateOrConnectWithoutPlayerInput = {
    where: PlayerAccountWhereUniqueInput
    create: XOR<PlayerAccountCreateWithoutPlayerInput, PlayerAccountUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerAccountCreateManyPlayerInputEnvelope = {
    data: PlayerAccountCreateManyPlayerInput | PlayerAccountCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutPlayerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    map?: MapCreateNestedOneWithoutGamesInput
    mode?: GameModeCreateNestedOneWithoutGamesInput
    platform?: PlatformCreateNestedOneWithoutGamesInput
    account?: PlayerAccountCreateNestedOneWithoutGamesInput
    rounds?: RoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutPlayerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    mapId?: string | null
    modeId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    rounds?: RoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutPlayerInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutPlayerInput, GameUncheckedCreateWithoutPlayerInput>
  }

  export type GameCreateManyPlayerInputEnvelope = {
    data: GameCreateManyPlayerInput | GameCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type RoundCreateWithoutPlayerInput = {
    id?: string
    createdAt?: Date | string
    roundNumber: number
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
    game: GameCreateNestedOneWithoutRoundsInput
    side: SideCreateNestedOneWithoutRoundsSideInput
    operator?: OperatorCreateNestedOneWithoutRoundsInput
  }

  export type RoundUncheckedCreateWithoutPlayerInput = {
    id?: string
    createdAt?: Date | string
    gameId: string
    roundNumber: number
    sideId: string
    operatorId?: string | null
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type RoundCreateOrConnectWithoutPlayerInput = {
    where: RoundWhereUniqueInput
    create: XOR<RoundCreateWithoutPlayerInput, RoundUncheckedCreateWithoutPlayerInput>
  }

  export type RoundCreateManyPlayerInputEnvelope = {
    data: RoundCreateManyPlayerInput | RoundCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type PlayerAccountUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerAccountWhereUniqueInput
    update: XOR<PlayerAccountUpdateWithoutPlayerInput, PlayerAccountUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerAccountCreateWithoutPlayerInput, PlayerAccountUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerAccountUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerAccountWhereUniqueInput
    data: XOR<PlayerAccountUpdateWithoutPlayerInput, PlayerAccountUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerAccountUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerAccountScalarWhereInput
    data: XOR<PlayerAccountUpdateManyMutationInput, PlayerAccountUncheckedUpdateManyWithoutPlayerInput>
  }

  export type GameUpsertWithWhereUniqueWithoutPlayerInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutPlayerInput, GameUncheckedUpdateWithoutPlayerInput>
    create: XOR<GameCreateWithoutPlayerInput, GameUncheckedCreateWithoutPlayerInput>
  }

  export type GameUpdateWithWhereUniqueWithoutPlayerInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutPlayerInput, GameUncheckedUpdateWithoutPlayerInput>
  }

  export type GameUpdateManyWithWhereWithoutPlayerInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutPlayerInput>
  }

  export type RoundUpsertWithWhereUniqueWithoutPlayerInput = {
    where: RoundWhereUniqueInput
    update: XOR<RoundUpdateWithoutPlayerInput, RoundUncheckedUpdateWithoutPlayerInput>
    create: XOR<RoundCreateWithoutPlayerInput, RoundUncheckedCreateWithoutPlayerInput>
  }

  export type RoundUpdateWithWhereUniqueWithoutPlayerInput = {
    where: RoundWhereUniqueInput
    data: XOR<RoundUpdateWithoutPlayerInput, RoundUncheckedUpdateWithoutPlayerInput>
  }

  export type RoundUpdateManyWithWhereWithoutPlayerInput = {
    where: RoundScalarWhereInput
    data: XOR<RoundUpdateManyMutationInput, RoundUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerCreateWithoutAccountsInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
    games?: GameCreateNestedManyWithoutPlayerInput
    rounds?: RoundCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutAccountsInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
    games?: GameUncheckedCreateNestedManyWithoutPlayerInput
    rounds?: RoundUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutAccountsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutAccountsInput, PlayerUncheckedCreateWithoutAccountsInput>
  }

  export type PlatformCreateWithoutAccountsInput = {
    id?: string
    name: string
    games?: GameCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateWithoutAccountsInput = {
    id?: string
    name: string
    games?: GameUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformCreateOrConnectWithoutAccountsInput = {
    where: PlatformWhereUniqueInput
    create: XOR<PlatformCreateWithoutAccountsInput, PlatformUncheckedCreateWithoutAccountsInput>
  }

  export type GameCreateWithoutAccountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    player?: PlayerCreateNestedOneWithoutGamesInput
    map?: MapCreateNestedOneWithoutGamesInput
    mode?: GameModeCreateNestedOneWithoutGamesInput
    platform?: PlatformCreateNestedOneWithoutGamesInput
    rounds?: RoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutAccountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    modeId?: string | null
    platformId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    rounds?: RoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutAccountInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutAccountInput, GameUncheckedCreateWithoutAccountInput>
  }

  export type GameCreateManyAccountInputEnvelope = {
    data: GameCreateManyAccountInput | GameCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type PlayerUpsertWithoutAccountsInput = {
    update: XOR<PlayerUpdateWithoutAccountsInput, PlayerUncheckedUpdateWithoutAccountsInput>
    create: XOR<PlayerCreateWithoutAccountsInput, PlayerUncheckedCreateWithoutAccountsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutAccountsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutAccountsInput, PlayerUncheckedUpdateWithoutAccountsInput>
  }

  export type PlayerUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    games?: GameUpdateManyWithoutPlayerNestedInput
    rounds?: RoundUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    games?: GameUncheckedUpdateManyWithoutPlayerNestedInput
    rounds?: RoundUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlatformUpsertWithoutAccountsInput = {
    update: XOR<PlatformUpdateWithoutAccountsInput, PlatformUncheckedUpdateWithoutAccountsInput>
    create: XOR<PlatformCreateWithoutAccountsInput, PlatformUncheckedCreateWithoutAccountsInput>
    where?: PlatformWhereInput
  }

  export type PlatformUpdateToOneWithWhereWithoutAccountsInput = {
    where?: PlatformWhereInput
    data: XOR<PlatformUpdateWithoutAccountsInput, PlatformUncheckedUpdateWithoutAccountsInput>
  }

  export type PlatformUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    games?: GameUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    games?: GameUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type GameUpsertWithWhereUniqueWithoutAccountInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutAccountInput, GameUncheckedUpdateWithoutAccountInput>
    create: XOR<GameCreateWithoutAccountInput, GameUncheckedCreateWithoutAccountInput>
  }

  export type GameUpdateWithWhereUniqueWithoutAccountInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutAccountInput, GameUncheckedUpdateWithoutAccountInput>
  }

  export type GameUpdateManyWithWhereWithoutAccountInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutAccountInput>
  }

  export type GameCreateWithoutMapInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    player?: PlayerCreateNestedOneWithoutGamesInput
    mode?: GameModeCreateNestedOneWithoutGamesInput
    platform?: PlatformCreateNestedOneWithoutGamesInput
    account?: PlayerAccountCreateNestedOneWithoutGamesInput
    rounds?: RoundCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutMapInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    modeId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    rounds?: RoundUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutMapInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutMapInput, GameUncheckedCreateWithoutMapInput>
  }

  export type GameCreateManyMapInputEnvelope = {
    data: GameCreateManyMapInput | GameCreateManyMapInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutMapInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutMapInput, GameUncheckedUpdateWithoutMapInput>
    create: XOR<GameCreateWithoutMapInput, GameUncheckedCreateWithoutMapInput>
  }

  export type GameUpdateWithWhereUniqueWithoutMapInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutMapInput, GameUncheckedUpdateWithoutMapInput>
  }

  export type GameUpdateManyWithWhereWithoutMapInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutMapInput>
  }

  export type SideCreateWithoutOperatorsInput = {
    id?: string
    name: string
    label: string
    roundsSide?: RoundCreateNestedManyWithoutSideInput
  }

  export type SideUncheckedCreateWithoutOperatorsInput = {
    id?: string
    name: string
    label: string
    roundsSide?: RoundUncheckedCreateNestedManyWithoutSideInput
  }

  export type SideCreateOrConnectWithoutOperatorsInput = {
    where: SideWhereUniqueInput
    create: XOR<SideCreateWithoutOperatorsInput, SideUncheckedCreateWithoutOperatorsInput>
  }

  export type RoundCreateWithoutOperatorInput = {
    id?: string
    createdAt?: Date | string
    roundNumber: number
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
    game: GameCreateNestedOneWithoutRoundsInput
    player: PlayerCreateNestedOneWithoutRoundsInput
    side: SideCreateNestedOneWithoutRoundsSideInput
  }

  export type RoundUncheckedCreateWithoutOperatorInput = {
    id?: string
    createdAt?: Date | string
    gameId: string
    playerId: string
    roundNumber: number
    sideId: string
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type RoundCreateOrConnectWithoutOperatorInput = {
    where: RoundWhereUniqueInput
    create: XOR<RoundCreateWithoutOperatorInput, RoundUncheckedCreateWithoutOperatorInput>
  }

  export type RoundCreateManyOperatorInputEnvelope = {
    data: RoundCreateManyOperatorInput | RoundCreateManyOperatorInput[]
    skipDuplicates?: boolean
  }

  export type SideUpsertWithoutOperatorsInput = {
    update: XOR<SideUpdateWithoutOperatorsInput, SideUncheckedUpdateWithoutOperatorsInput>
    create: XOR<SideCreateWithoutOperatorsInput, SideUncheckedCreateWithoutOperatorsInput>
    where?: SideWhereInput
  }

  export type SideUpdateToOneWithWhereWithoutOperatorsInput = {
    where?: SideWhereInput
    data: XOR<SideUpdateWithoutOperatorsInput, SideUncheckedUpdateWithoutOperatorsInput>
  }

  export type SideUpdateWithoutOperatorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    roundsSide?: RoundUpdateManyWithoutSideNestedInput
  }

  export type SideUncheckedUpdateWithoutOperatorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    roundsSide?: RoundUncheckedUpdateManyWithoutSideNestedInput
  }

  export type RoundUpsertWithWhereUniqueWithoutOperatorInput = {
    where: RoundWhereUniqueInput
    update: XOR<RoundUpdateWithoutOperatorInput, RoundUncheckedUpdateWithoutOperatorInput>
    create: XOR<RoundCreateWithoutOperatorInput, RoundUncheckedCreateWithoutOperatorInput>
  }

  export type RoundUpdateWithWhereUniqueWithoutOperatorInput = {
    where: RoundWhereUniqueInput
    data: XOR<RoundUpdateWithoutOperatorInput, RoundUncheckedUpdateWithoutOperatorInput>
  }

  export type RoundUpdateManyWithWhereWithoutOperatorInput = {
    where: RoundScalarWhereInput
    data: XOR<RoundUpdateManyMutationInput, RoundUncheckedUpdateManyWithoutOperatorInput>
  }

  export type PlayerCreateWithoutGamesInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
    accounts?: PlayerAccountCreateNestedManyWithoutPlayerInput
    rounds?: RoundCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutGamesInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
    accounts?: PlayerAccountUncheckedCreateNestedManyWithoutPlayerInput
    rounds?: RoundUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutGamesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutGamesInput, PlayerUncheckedCreateWithoutGamesInput>
  }

  export type MapCreateWithoutGamesInput = {
    id?: string
    name: string
    nameFr: string
    url: string
  }

  export type MapUncheckedCreateWithoutGamesInput = {
    id?: string
    name: string
    nameFr: string
    url: string
  }

  export type MapCreateOrConnectWithoutGamesInput = {
    where: MapWhereUniqueInput
    create: XOR<MapCreateWithoutGamesInput, MapUncheckedCreateWithoutGamesInput>
  }

  export type GameModeCreateWithoutGamesInput = {
    id?: string
    name: string
  }

  export type GameModeUncheckedCreateWithoutGamesInput = {
    id?: string
    name: string
  }

  export type GameModeCreateOrConnectWithoutGamesInput = {
    where: GameModeWhereUniqueInput
    create: XOR<GameModeCreateWithoutGamesInput, GameModeUncheckedCreateWithoutGamesInput>
  }

  export type PlatformCreateWithoutGamesInput = {
    id?: string
    name: string
    accounts?: PlayerAccountCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateWithoutGamesInput = {
    id?: string
    name: string
    accounts?: PlayerAccountUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformCreateOrConnectWithoutGamesInput = {
    where: PlatformWhereUniqueInput
    create: XOR<PlatformCreateWithoutGamesInput, PlatformUncheckedCreateWithoutGamesInput>
  }

  export type PlayerAccountCreateWithoutGamesInput = {
    id?: string
    gamertag: string
    externalId?: string | null
    player: PlayerCreateNestedOneWithoutAccountsInput
    platform: PlatformCreateNestedOneWithoutAccountsInput
  }

  export type PlayerAccountUncheckedCreateWithoutGamesInput = {
    id?: string
    playerId: string
    platformId: string
    gamertag: string
    externalId?: string | null
  }

  export type PlayerAccountCreateOrConnectWithoutGamesInput = {
    where: PlayerAccountWhereUniqueInput
    create: XOR<PlayerAccountCreateWithoutGamesInput, PlayerAccountUncheckedCreateWithoutGamesInput>
  }

  export type RoundCreateWithoutGameInput = {
    id?: string
    createdAt?: Date | string
    roundNumber: number
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
    player: PlayerCreateNestedOneWithoutRoundsInput
    side: SideCreateNestedOneWithoutRoundsSideInput
    operator?: OperatorCreateNestedOneWithoutRoundsInput
  }

  export type RoundUncheckedCreateWithoutGameInput = {
    id?: string
    createdAt?: Date | string
    playerId: string
    roundNumber: number
    sideId: string
    operatorId?: string | null
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type RoundCreateOrConnectWithoutGameInput = {
    where: RoundWhereUniqueInput
    create: XOR<RoundCreateWithoutGameInput, RoundUncheckedCreateWithoutGameInput>
  }

  export type RoundCreateManyGameInputEnvelope = {
    data: RoundCreateManyGameInput | RoundCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type PlayerUpsertWithoutGamesInput = {
    update: XOR<PlayerUpdateWithoutGamesInput, PlayerUncheckedUpdateWithoutGamesInput>
    create: XOR<PlayerCreateWithoutGamesInput, PlayerUncheckedCreateWithoutGamesInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutGamesInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutGamesInput, PlayerUncheckedUpdateWithoutGamesInput>
  }

  export type PlayerUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accounts?: PlayerAccountUpdateManyWithoutPlayerNestedInput
    rounds?: RoundUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accounts?: PlayerAccountUncheckedUpdateManyWithoutPlayerNestedInput
    rounds?: RoundUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type MapUpsertWithoutGamesInput = {
    update: XOR<MapUpdateWithoutGamesInput, MapUncheckedUpdateWithoutGamesInput>
    create: XOR<MapCreateWithoutGamesInput, MapUncheckedCreateWithoutGamesInput>
    where?: MapWhereInput
  }

  export type MapUpdateToOneWithWhereWithoutGamesInput = {
    where?: MapWhereInput
    data: XOR<MapUpdateWithoutGamesInput, MapUncheckedUpdateWithoutGamesInput>
  }

  export type MapUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameFr?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type MapUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    nameFr?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GameModeUpsertWithoutGamesInput = {
    update: XOR<GameModeUpdateWithoutGamesInput, GameModeUncheckedUpdateWithoutGamesInput>
    create: XOR<GameModeCreateWithoutGamesInput, GameModeUncheckedCreateWithoutGamesInput>
    where?: GameModeWhereInput
  }

  export type GameModeUpdateToOneWithWhereWithoutGamesInput = {
    where?: GameModeWhereInput
    data: XOR<GameModeUpdateWithoutGamesInput, GameModeUncheckedUpdateWithoutGamesInput>
  }

  export type GameModeUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GameModeUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlatformUpsertWithoutGamesInput = {
    update: XOR<PlatformUpdateWithoutGamesInput, PlatformUncheckedUpdateWithoutGamesInput>
    create: XOR<PlatformCreateWithoutGamesInput, PlatformUncheckedCreateWithoutGamesInput>
    where?: PlatformWhereInput
  }

  export type PlatformUpdateToOneWithWhereWithoutGamesInput = {
    where?: PlatformWhereInput
    data: XOR<PlatformUpdateWithoutGamesInput, PlatformUncheckedUpdateWithoutGamesInput>
  }

  export type PlatformUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    accounts?: PlayerAccountUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    accounts?: PlayerAccountUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type PlayerAccountUpsertWithoutGamesInput = {
    update: XOR<PlayerAccountUpdateWithoutGamesInput, PlayerAccountUncheckedUpdateWithoutGamesInput>
    create: XOR<PlayerAccountCreateWithoutGamesInput, PlayerAccountUncheckedCreateWithoutGamesInput>
    where?: PlayerAccountWhereInput
  }

  export type PlayerAccountUpdateToOneWithWhereWithoutGamesInput = {
    where?: PlayerAccountWhereInput
    data: XOR<PlayerAccountUpdateWithoutGamesInput, PlayerAccountUncheckedUpdateWithoutGamesInput>
  }

  export type PlayerAccountUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    player?: PlayerUpdateOneRequiredWithoutAccountsNestedInput
    platform?: PlatformUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type PlayerAccountUncheckedUpdateWithoutGamesInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoundUpsertWithWhereUniqueWithoutGameInput = {
    where: RoundWhereUniqueInput
    update: XOR<RoundUpdateWithoutGameInput, RoundUncheckedUpdateWithoutGameInput>
    create: XOR<RoundCreateWithoutGameInput, RoundUncheckedCreateWithoutGameInput>
  }

  export type RoundUpdateWithWhereUniqueWithoutGameInput = {
    where: RoundWhereUniqueInput
    data: XOR<RoundUpdateWithoutGameInput, RoundUncheckedUpdateWithoutGameInput>
  }

  export type RoundUpdateManyWithWhereWithoutGameInput = {
    where: RoundScalarWhereInput
    data: XOR<RoundUpdateManyMutationInput, RoundUncheckedUpdateManyWithoutGameInput>
  }

  export type GameCreateWithoutRoundsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
    player?: PlayerCreateNestedOneWithoutGamesInput
    map?: MapCreateNestedOneWithoutGamesInput
    mode?: GameModeCreateNestedOneWithoutGamesInput
    platform?: PlatformCreateNestedOneWithoutGamesInput
    account?: PlayerAccountCreateNestedOneWithoutGamesInput
  }

  export type GameUncheckedCreateWithoutRoundsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    modeId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
  }

  export type GameCreateOrConnectWithoutRoundsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutRoundsInput, GameUncheckedCreateWithoutRoundsInput>
  }

  export type PlayerCreateWithoutRoundsInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
    accounts?: PlayerAccountCreateNestedManyWithoutPlayerInput
    games?: GameCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutRoundsInput = {
    id?: string
    createdAt?: Date | string
    email: string
    username: string
    password: string
    accounts?: PlayerAccountUncheckedCreateNestedManyWithoutPlayerInput
    games?: GameUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutRoundsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutRoundsInput, PlayerUncheckedCreateWithoutRoundsInput>
  }

  export type SideCreateWithoutRoundsSideInput = {
    id?: string
    name: string
    label: string
    operators?: OperatorCreateNestedManyWithoutSideInput
  }

  export type SideUncheckedCreateWithoutRoundsSideInput = {
    id?: string
    name: string
    label: string
    operators?: OperatorUncheckedCreateNestedManyWithoutSideInput
  }

  export type SideCreateOrConnectWithoutRoundsSideInput = {
    where: SideWhereUniqueInput
    create: XOR<SideCreateWithoutRoundsSideInput, SideUncheckedCreateWithoutRoundsSideInput>
  }

  export type OperatorCreateWithoutRoundsInput = {
    id?: string
    name: string
    image?: string | null
    icon: string
    side: SideCreateNestedOneWithoutOperatorsInput
  }

  export type OperatorUncheckedCreateWithoutRoundsInput = {
    id?: string
    name: string
    sideId: string
    image?: string | null
    icon: string
  }

  export type OperatorCreateOrConnectWithoutRoundsInput = {
    where: OperatorWhereUniqueInput
    create: XOR<OperatorCreateWithoutRoundsInput, OperatorUncheckedCreateWithoutRoundsInput>
  }

  export type GameUpsertWithoutRoundsInput = {
    update: XOR<GameUpdateWithoutRoundsInput, GameUncheckedUpdateWithoutRoundsInput>
    create: XOR<GameCreateWithoutRoundsInput, GameUncheckedCreateWithoutRoundsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutRoundsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutRoundsInput, GameUncheckedUpdateWithoutRoundsInput>
  }

  export type GameUpdateWithoutRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    player?: PlayerUpdateOneWithoutGamesNestedInput
    map?: MapUpdateOneWithoutGamesNestedInput
    mode?: GameModeUpdateOneWithoutGamesNestedInput
    platform?: PlatformUpdateOneWithoutGamesNestedInput
    account?: PlayerAccountUpdateOneWithoutGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerUpsertWithoutRoundsInput = {
    update: XOR<PlayerUpdateWithoutRoundsInput, PlayerUncheckedUpdateWithoutRoundsInput>
    create: XOR<PlayerCreateWithoutRoundsInput, PlayerUncheckedCreateWithoutRoundsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutRoundsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutRoundsInput, PlayerUncheckedUpdateWithoutRoundsInput>
  }

  export type PlayerUpdateWithoutRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accounts?: PlayerAccountUpdateManyWithoutPlayerNestedInput
    games?: GameUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accounts?: PlayerAccountUncheckedUpdateManyWithoutPlayerNestedInput
    games?: GameUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type SideUpsertWithoutRoundsSideInput = {
    update: XOR<SideUpdateWithoutRoundsSideInput, SideUncheckedUpdateWithoutRoundsSideInput>
    create: XOR<SideCreateWithoutRoundsSideInput, SideUncheckedCreateWithoutRoundsSideInput>
    where?: SideWhereInput
  }

  export type SideUpdateToOneWithWhereWithoutRoundsSideInput = {
    where?: SideWhereInput
    data: XOR<SideUpdateWithoutRoundsSideInput, SideUncheckedUpdateWithoutRoundsSideInput>
  }

  export type SideUpdateWithoutRoundsSideInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    operators?: OperatorUpdateManyWithoutSideNestedInput
  }

  export type SideUncheckedUpdateWithoutRoundsSideInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    operators?: OperatorUncheckedUpdateManyWithoutSideNestedInput
  }

  export type OperatorUpsertWithoutRoundsInput = {
    update: XOR<OperatorUpdateWithoutRoundsInput, OperatorUncheckedUpdateWithoutRoundsInput>
    create: XOR<OperatorCreateWithoutRoundsInput, OperatorUncheckedCreateWithoutRoundsInput>
    where?: OperatorWhereInput
  }

  export type OperatorUpdateToOneWithWhereWithoutRoundsInput = {
    where?: OperatorWhereInput
    data: XOR<OperatorUpdateWithoutRoundsInput, OperatorUncheckedUpdateWithoutRoundsInput>
  }

  export type OperatorUpdateWithoutRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    side?: SideUpdateOneRequiredWithoutOperatorsNestedInput
  }

  export type OperatorUncheckedUpdateWithoutRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sideId?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type GameCreateManyPlatformInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    modeId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
  }

  export type PlayerAccountCreateManyPlatformInput = {
    id?: string
    playerId: string
    gamertag: string
    externalId?: string | null
  }

  export type GameUpdateWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    player?: PlayerUpdateOneWithoutGamesNestedInput
    map?: MapUpdateOneWithoutGamesNestedInput
    mode?: GameModeUpdateOneWithoutGamesNestedInput
    account?: PlayerAccountUpdateOneWithoutGamesNestedInput
    rounds?: RoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    rounds?: RoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerAccountUpdateWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    player?: PlayerUpdateOneRequiredWithoutAccountsNestedInput
    games?: GameUpdateManyWithoutAccountNestedInput
  }

  export type PlayerAccountUncheckedUpdateWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    games?: GameUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type PlayerAccountUncheckedUpdateManyWithoutPlatformInput = {
    id?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OperatorCreateManySideInput = {
    id?: string
    name: string
    image?: string | null
    icon: string
  }

  export type RoundCreateManySideInput = {
    id?: string
    createdAt?: Date | string
    gameId: string
    playerId: string
    roundNumber: number
    operatorId?: string | null
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type OperatorUpdateWithoutSideInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    rounds?: RoundUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorUncheckedUpdateWithoutSideInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    rounds?: RoundUncheckedUpdateManyWithoutOperatorNestedInput
  }

  export type OperatorUncheckedUpdateManyWithoutSideInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type RoundUpdateWithoutSideInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUpdateOneRequiredWithoutRoundsNestedInput
    player?: PlayerUpdateOneRequiredWithoutRoundsNestedInput
    operator?: OperatorUpdateOneWithoutRoundsNestedInput
  }

  export type RoundUncheckedUpdateWithoutSideInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundUncheckedUpdateManyWithoutSideInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameCreateManyModeInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
  }

  export type GameUpdateWithoutModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    player?: PlayerUpdateOneWithoutGamesNestedInput
    map?: MapUpdateOneWithoutGamesNestedInput
    platform?: PlatformUpdateOneWithoutGamesNestedInput
    account?: PlayerAccountUpdateOneWithoutGamesNestedInput
    rounds?: RoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    rounds?: RoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerAccountCreateManyPlayerInput = {
    id?: string
    platformId: string
    gamertag: string
    externalId?: string | null
  }

  export type GameCreateManyPlayerInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    mapId?: string | null
    modeId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
  }

  export type RoundCreateManyPlayerInput = {
    id?: string
    createdAt?: Date | string
    gameId: string
    roundNumber: number
    sideId: string
    operatorId?: string | null
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type PlayerAccountUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: PlatformUpdateOneRequiredWithoutAccountsNestedInput
    games?: GameUpdateManyWithoutAccountNestedInput
  }

  export type PlayerAccountUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    games?: GameUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type PlayerAccountUncheckedUpdateManyWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformId?: StringFieldUpdateOperationsInput | string
    gamertag?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GameUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    map?: MapUpdateOneWithoutGamesNestedInput
    mode?: GameModeUpdateOneWithoutGamesNestedInput
    platform?: PlatformUpdateOneWithoutGamesNestedInput
    account?: PlayerAccountUpdateOneWithoutGamesNestedInput
    rounds?: RoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    rounds?: RoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUpdateOneRequiredWithoutRoundsNestedInput
    side?: SideUpdateOneRequiredWithoutRoundsSideNestedInput
    operator?: OperatorUpdateOneWithoutRoundsNestedInput
  }

  export type RoundUncheckedUpdateWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    sideId?: StringFieldUpdateOperationsInput | string
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundUncheckedUpdateManyWithoutPlayerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    sideId?: StringFieldUpdateOperationsInput | string
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameCreateManyAccountInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    mapId?: string | null
    modeId?: string | null
    platformId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
  }

  export type GameUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    player?: PlayerUpdateOneWithoutGamesNestedInput
    map?: MapUpdateOneWithoutGamesNestedInput
    mode?: GameModeUpdateOneWithoutGamesNestedInput
    platform?: PlatformUpdateOneWithoutGamesNestedInput
    rounds?: RoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    rounds?: RoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    mapId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameCreateManyMapInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    date?: Date | string | null
    playerId?: string | null
    modeId?: string | null
    platformId?: string | null
    accountId?: string | null
    playerScore?: number | null
    opponentScore?: number | null
    status?: string | null
    overtime?: boolean | null
    roundNumber?: number | null
    isFinished?: boolean
  }

  export type GameUpdateWithoutMapInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    player?: PlayerUpdateOneWithoutGamesNestedInput
    mode?: GameModeUpdateOneWithoutGamesNestedInput
    platform?: PlatformUpdateOneWithoutGamesNestedInput
    account?: PlayerAccountUpdateOneWithoutGamesNestedInput
    rounds?: RoundUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutMapInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    rounds?: RoundUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutMapInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    modeId?: NullableStringFieldUpdateOperationsInput | string | null
    platformId?: NullableStringFieldUpdateOperationsInput | string | null
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    playerScore?: NullableIntFieldUpdateOperationsInput | number | null
    opponentScore?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    overtime?: NullableBoolFieldUpdateOperationsInput | boolean | null
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundCreateManyOperatorInput = {
    id?: string
    createdAt?: Date | string
    gameId: string
    playerId: string
    roundNumber: number
    sideId: string
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type RoundUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    game?: GameUpdateOneRequiredWithoutRoundsNestedInput
    player?: PlayerUpdateOneRequiredWithoutRoundsNestedInput
    side?: SideUpdateOneRequiredWithoutRoundsSideNestedInput
  }

  export type RoundUncheckedUpdateWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    sideId?: StringFieldUpdateOperationsInput | string
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundUncheckedUpdateManyWithoutOperatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: StringFieldUpdateOperationsInput | string
    playerId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    sideId?: StringFieldUpdateOperationsInput | string
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundCreateManyGameInput = {
    id?: string
    createdAt?: Date | string
    playerId: string
    roundNumber: number
    sideId: string
    operatorId?: string | null
    roundResult?: string | null
    kills?: number
    death?: boolean
    assists?: number
    disconnected?: boolean
    points?: number
    isFinished?: boolean
  }

  export type RoundUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
    player?: PlayerUpdateOneRequiredWithoutRoundsNestedInput
    side?: SideUpdateOneRequiredWithoutRoundsSideNestedInput
    operator?: OperatorUpdateOneWithoutRoundsNestedInput
  }

  export type RoundUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    sideId?: StringFieldUpdateOperationsInput | string
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoundUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playerId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    sideId?: StringFieldUpdateOperationsInput | string
    operatorId?: NullableStringFieldUpdateOperationsInput | string | null
    roundResult?: NullableStringFieldUpdateOperationsInput | string | null
    kills?: IntFieldUpdateOperationsInput | number
    death?: BoolFieldUpdateOperationsInput | boolean
    assists?: IntFieldUpdateOperationsInput | number
    disconnected?: BoolFieldUpdateOperationsInput | boolean
    points?: IntFieldUpdateOperationsInput | number
    isFinished?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}